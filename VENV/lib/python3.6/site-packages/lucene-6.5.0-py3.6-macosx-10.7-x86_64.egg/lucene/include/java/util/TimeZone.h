#ifndef java_util_TimeZone_H
#define java_util_TimeZone_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Locale;
    class Date;
  }
  namespace lang {
    class Class;
    class String;
    class Cloneable;
  }
  namespace io {
    class Serializable;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class TimeZone : public ::java::lang::Object {
    public:
      enum {
        mid_init$_baea6bf243e2d9b8,
        mid_clone_fcd621d44e119d75,
        mid_getAvailableIDs_aab503f7866a0311,
        mid_getAvailableIDs_9edb450d2e40b0fc,
        mid_getDSTSavings_c6ef1683adc87377,
        mid_getDefault_34e5f89e5f1425d3,
        mid_getDisplayName_8cdd42a672015029,
        mid_getDisplayName_f2f50d06d11893ad,
        mid_getDisplayName_b89135d7d53cee35,
        mid_getDisplayName_718b443e78e7b39c,
        mid_getID_8cdd42a672015029,
        mid_getOffset_c8dddfb021d16d75,
        mid_getOffset_00abe58224193925,
        mid_getRawOffset_c6ef1683adc87377,
        mid_getTimeZone_d0ea9d3481d5fb41,
        mid_hasSameRules_7d0e7d32302dcb3c,
        mid_inDaylightTime_1cab21f2ef6bd49a,
        mid_observesDaylightTime_cc8de42f0a91785b,
        mid_setDefault_c968cc6bd5280c40,
        mid_setID_3e4369e088f8ac83,
        mid_setRawOffset_e3e5f5ff373509b3,
        mid_useDaylightTime_cc8de42f0a91785b,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit TimeZone(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      TimeZone(const TimeZone& obj) : ::java::lang::Object(obj) {}

      static jint LONG;
      static jint SHORT;

      TimeZone();

      ::java::lang::Object clone() const;
      static JArray< ::java::lang::String > getAvailableIDs();
      static JArray< ::java::lang::String > getAvailableIDs(jint);
      jint getDSTSavings() const;
      static TimeZone getDefault();
      ::java::lang::String getDisplayName() const;
      ::java::lang::String getDisplayName(const ::java::util::Locale &) const;
      ::java::lang::String getDisplayName(jboolean, jint) const;
      ::java::lang::String getDisplayName(jboolean, jint, const ::java::util::Locale &) const;
      ::java::lang::String getID() const;
      jint getOffset(jlong) const;
      jint getOffset(jint, jint, jint, jint, jint, jint) const;
      jint getRawOffset() const;
      static TimeZone getTimeZone(const ::java::lang::String &);
      jboolean hasSameRules(const TimeZone &) const;
      jboolean inDaylightTime(const ::java::util::Date &) const;
      jboolean observesDaylightTime() const;
      static void setDefault(const TimeZone &);
      void setID(const ::java::lang::String &) const;
      void setRawOffset(jint) const;
      jboolean useDaylightTime() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyTypeObject PY_TYPE(TimeZone);

    class t_TimeZone {
    public:
      PyObject_HEAD
      TimeZone object;
      static PyObject *wrap_Object(const TimeZone&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
