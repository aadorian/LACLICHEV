#ifndef java_lang_String_H
#define java_lang_String_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Locale;
    class Comparator;
  }
  namespace lang {
    class Class;
    class StringBuilder;
    class CharSequence;
    class Iterable;
    class StringBuffer;
    class Comparable;
  }
  namespace io {
    class Serializable;
    class UnsupportedEncodingException;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class String : public ::java::lang::Object {
    public:
      enum {
        mid_init$_baea6bf243e2d9b8,
        mid_init$_c4033df61ea39729,
        mid_init$_73dde0de14f8e103,
        mid_init$_f60f11336830069c,
        mid_init$_5e258682a98fb7d3,
        mid_init$_40af3d9b4ee7bdba,
        mid_init$_b0c16edd505e0f11,
        mid_init$_d55124a1b37f87c1,
        mid_init$_10bda464403ffea4,
        mid_init$_dc4e7afa5630877e,
        mid_init$_9cf1c43baf8218ba,
        mid_init$_cd21237a3b711f7c,
        mid_charAt_d9ac27cd414dde64,
        mid_codePointAt_eb4f2d82869c338b,
        mid_codePointBefore_eb4f2d82869c338b,
        mid_codePointCount_9ebb972a63d3bb3c,
        mid_compareTo_07a398a2298c97a7,
        mid_compareToIgnoreCase_07a398a2298c97a7,
        mid_concat_8f17802fec60c02b,
        mid_contains_14cd4666586f434c,
        mid_contentEquals_d8b7ce642a95efbc,
        mid_contentEquals_14cd4666586f434c,
        mid_copyValueOf_65b1cd057c79c9ce,
        mid_copyValueOf_f450b9de69463768,
        mid_endsWith_e428191c9abe97cd,
        mid_equals_55f7ed877b4720ef,
        mid_equalsIgnoreCase_e428191c9abe97cd,
        mid_format_84e81d6a5b513846,
        mid_format_328b40c7622731fa,
        mid_getBytes_9f2b5bf6861b55dd,
        mid_getBytes_be7021e69479c2d6,
        mid_getBytes_82bdb58f3d91c1e4,
        mid_getChars_9fc2bdd16efcaf84,
        mid_hashCode_c6ef1683adc87377,
        mid_indexOf_eb4f2d82869c338b,
        mid_indexOf_07a398a2298c97a7,
        mid_indexOf_0159111ae701015e,
        mid_indexOf_9ebb972a63d3bb3c,
        mid_intern_8cdd42a672015029,
        mid_isEmpty_cc8de42f0a91785b,
        mid_join_929dd37ac0b604ff,
        mid_join_8940d66cb415580d,
        mid_lastIndexOf_eb4f2d82869c338b,
        mid_lastIndexOf_07a398a2298c97a7,
        mid_lastIndexOf_9ebb972a63d3bb3c,
        mid_lastIndexOf_0159111ae701015e,
        mid_length_c6ef1683adc87377,
        mid_matches_e428191c9abe97cd,
        mid_offsetByCodePoints_9ebb972a63d3bb3c,
        mid_regionMatches_90e9c878080cd2b5,
        mid_regionMatches_a2c29416a6fb3174,
        mid_replace_3e81b909413df0d3,
        mid_replace_7bad35e72e5b7ee0,
        mid_replaceAll_734974d6876a6e71,
        mid_replaceFirst_734974d6876a6e71,
        mid_split_a63d4658415fdb98,
        mid_split_1aa803baff5c29b9,
        mid_startsWith_e428191c9abe97cd,
        mid_startsWith_28309d77da8de64e,
        mid_subSequence_27c48fefeb6bdcd7,
        mid_substring_e5ab4ec225f780e9,
        mid_substring_2f188a32ac95e8d9,
        mid_toCharArray_b5a9d73f90d3ecca,
        mid_toLowerCase_8cdd42a672015029,
        mid_toLowerCase_f2f50d06d11893ad,
        mid_toString_8cdd42a672015029,
        mid_toUpperCase_8cdd42a672015029,
        mid_toUpperCase_f2f50d06d11893ad,
        mid_trim_8cdd42a672015029,
        mid_valueOf_18d514694930a7dd,
        mid_valueOf_37f8497ff6be258c,
        mid_valueOf_e15c13cf7c34a00b,
        mid_valueOf_65b1cd057c79c9ce,
        mid_valueOf_2d2f98e9862a8d2e,
        mid_valueOf_b8c0ba2fce24e9a4,
        mid_valueOf_00812b845ebcd112,
        mid_valueOf_e5ab4ec225f780e9,
        mid_valueOf_f450b9de69463768,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit String(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      String(const String& obj) : ::java::lang::Object(obj) {}

      static ::java::util::Comparator *CASE_INSENSITIVE_ORDER;

      String();
      String(const ::java::lang::StringBuilder &);
      String(const ::java::lang::StringBuffer &);
      String(const JArray< jbyte > &);
      String(const JArray< jchar > &);
      String(const JArray< jbyte > &, const String &);
      String(const JArray< jbyte > &, jint);
      String(const JArray< jbyte > &, jint, jint);
      String(const JArray< jint > &, jint, jint);
      String(const JArray< jchar > &, jint, jint);
      String(const JArray< jbyte > &, jint, jint, const String &);
      String(const JArray< jbyte > &, jint, jint, jint);

      jchar charAt(jint) const;
      jint codePointAt(jint) const;
      jint codePointBefore(jint) const;
      jint codePointCount(jint, jint) const;
      jint compareTo(const String &) const;
      jint compareToIgnoreCase(const String &) const;
      String concat(const String &) const;
      jboolean contains(const ::java::lang::CharSequence &) const;
      jboolean contentEquals(const ::java::lang::StringBuffer &) const;
      jboolean contentEquals(const ::java::lang::CharSequence &) const;
      static String copyValueOf(const JArray< jchar > &);
      static String copyValueOf(const JArray< jchar > &, jint, jint);
      jboolean endsWith(const String &) const;
      jboolean equals(const ::java::lang::Object &) const;
      jboolean equalsIgnoreCase(const String &) const;
      static String format(const String &, const JArray< ::java::lang::Object > &);
      static String format(const ::java::util::Locale &, const String &, const JArray< ::java::lang::Object > &);
      JArray< jbyte > getBytes() const;
      JArray< jbyte > getBytes(const String &) const;
      void getBytes(jint, jint, const JArray< jbyte > &, jint) const;
      void getChars(jint, jint, const JArray< jchar > &, jint) const;
      jint hashCode() const;
      jint indexOf(jint) const;
      jint indexOf(const String &) const;
      jint indexOf(const String &, jint) const;
      jint indexOf(jint, jint) const;
      String intern() const;
      jboolean isEmpty() const;
      static String join(const ::java::lang::CharSequence &, const JArray< ::java::lang::CharSequence > &);
      static String join(const ::java::lang::CharSequence &, const ::java::lang::Iterable &);
      jint lastIndexOf(jint) const;
      jint lastIndexOf(const String &) const;
      jint lastIndexOf(jint, jint) const;
      jint lastIndexOf(const String &, jint) const;
      jint length() const;
      jboolean matches(const String &) const;
      jint offsetByCodePoints(jint, jint) const;
      jboolean regionMatches(jint, const String &, jint, jint) const;
      jboolean regionMatches(jboolean, jint, const String &, jint, jint) const;
      String replace(jchar, jchar) const;
      String replace(const ::java::lang::CharSequence &, const ::java::lang::CharSequence &) const;
      String replaceAll(const String &, const String &) const;
      String replaceFirst(const String &, const String &) const;
      JArray< String > split(const String &) const;
      JArray< String > split(const String &, jint) const;
      jboolean startsWith(const String &) const;
      jboolean startsWith(const String &, jint) const;
      ::java::lang::CharSequence subSequence(jint, jint) const;
      String substring(jint) const;
      String substring(jint, jint) const;
      JArray< jchar > toCharArray() const;
      String toLowerCase() const;
      String toLowerCase(const ::java::util::Locale &) const;
      String toString() const;
      String toUpperCase() const;
      String toUpperCase(const ::java::util::Locale &) const;
      String trim() const;
      static String valueOf(jchar);
      static String valueOf(const ::java::lang::Object &);
      static String valueOf(jboolean);
      static String valueOf(const JArray< jchar > &);
      static String valueOf(jdouble);
      static String valueOf(jfloat);
      static String valueOf(jlong);
      static String valueOf(jint);
      static String valueOf(const JArray< jchar > &, jint, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(String);

    class t_String {
    public:
      PyObject_HEAD
      String object;
      static PyObject *wrap_Object(const String&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
