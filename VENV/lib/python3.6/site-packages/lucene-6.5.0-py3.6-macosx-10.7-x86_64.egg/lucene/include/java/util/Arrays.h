#ifndef java_util_Arrays_H
#define java_util_Arrays_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Spliterator$OfDouble;
    class Spliterator$OfInt;
    class Spliterator;
    class Comparator;
    class Spliterator$OfLong;
    class List;
  }
  namespace lang {
    class Class;
    class Comparable;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class Arrays : public ::java::lang::Object {
    public:
      enum {
        mid_asList_587f77815f64a896,
        mid_binarySearch_c78595b32d09c9c0,
        mid_binarySearch_738eb2bb708df426,
        mid_binarySearch_624800f110974991,
        mid_binarySearch_b780ff163385c0ff,
        mid_binarySearch_99ed96280358e866,
        mid_binarySearch_d393232bcfc3467d,
        mid_binarySearch_b976d2f3986c705e,
        mid_binarySearch_8eb9a7594b6f4800,
        mid_binarySearch_122bf507dc3d268e,
        mid_binarySearch_03019cc32e83a74a,
        mid_binarySearch_ad07653d62b4b320,
        mid_binarySearch_a896281e72b32d5f,
        mid_binarySearch_b4d2aa0490da0b92,
        mid_binarySearch_afb9f66ba5472dd9,
        mid_binarySearch_8b69ad5a2b71695d,
        mid_binarySearch_e111d0ada891c7dc,
        mid_binarySearch_848323fbc0c61635,
        mid_binarySearch_6d181f2151600172,
        mid_copyOf_99ddd30bd32bd4c5,
        mid_copyOf_e8cc800b6be6fb0c,
        mid_copyOf_5a969ca6325af061,
        mid_copyOf_a73bb284a16b100b,
        mid_copyOf_fe3f34f4f6fc7c79,
        mid_copyOf_a2e7c7c75c216c65,
        mid_copyOf_d4f62c5b48881dc7,
        mid_copyOf_3ef8f575e8f7ede6,
        mid_copyOf_5fae24663a273bc2,
        mid_copyOf_3b0183db6635c00e,
        mid_copyOfRange_4498d0e9b524532c,
        mid_copyOfRange_db2fe35ff31a95f0,
        mid_copyOfRange_a30f65761b95ec2c,
        mid_copyOfRange_199d1d55d3c4aae6,
        mid_copyOfRange_679be3af81f8a596,
        mid_copyOfRange_e6eaf1b64bb3bb52,
        mid_copyOfRange_02e22a05ca2afbdf,
        mid_copyOfRange_61ac3a921f9ac910,
        mid_copyOfRange_b6387580b8f9143a,
        mid_copyOfRange_7884f03412b70abf,
        mid_deepEquals_144f06ff3eaf616b,
        mid_deepHashCode_0f88c3ae86d0d70d,
        mid_deepToString_fb0a7beec5cfa88f,
        mid_equals_31684dddf34f406b,
        mid_equals_c1f8180d405f1c6b,
        mid_equals_1c79855fd88619f6,
        mid_equals_6d1fba75aa821406,
        mid_equals_144f06ff3eaf616b,
        mid_equals_b1fd50f0a9a437a3,
        mid_equals_cbc29c1800812f87,
        mid_equals_653d82cb4945b5f8,
        mid_equals_7f7eba78a14e38cd,
        mid_fill_95cb2d85c3e59da7,
        mid_fill_d7f94d04799436ef,
        mid_fill_3a47854df5377cfd,
        mid_fill_5ed53faa9b797e60,
        mid_fill_8e9027a7dc976c5f,
        mid_fill_c467b6ee00982cdc,
        mid_fill_7b1d98e5c8656a1c,
        mid_fill_f72fe1275878cb65,
        mid_fill_ab8de790d14ebda6,
        mid_fill_222d1e409d010163,
        mid_fill_bda9ddd7c9086514,
        mid_fill_dbfe695ca50d8b8b,
        mid_fill_067d7b423e8d0b82,
        mid_fill_6046b91e48bf1b1a,
        mid_fill_07fc24572b8fe212,
        mid_fill_39a1d08d0ef63e54,
        mid_fill_a7790576d954b16b,
        mid_fill_2e735cbab83ce245,
        mid_hashCode_7b0e527e214de54b,
        mid_hashCode_1d437a5c43f4edaf,
        mid_hashCode_3f37d805c36383fb,
        mid_hashCode_c87ec210afbcda3b,
        mid_hashCode_0af2fe8f39df3157,
        mid_hashCode_bdb22cd294cdee5d,
        mid_hashCode_a40e53ccb2ee9acd,
        mid_hashCode_2f6bb008cefa6386,
        mid_hashCode_0f88c3ae86d0d70d,
        mid_parallelSort_a26f6ca2434b9208,
        mid_parallelSort_f60f11336830069c,
        mid_parallelSort_856c2dcbbade9505,
        mid_parallelSort_0b042980913e0149,
        mid_parallelSort_be43af8694a74b23,
        mid_parallelSort_5e258682a98fb7d3,
        mid_parallelSort_f2e1c02cf13c6a0f,
        mid_parallelSort_c45acf16b0e9cf44,
        mid_parallelSort_f5a12bd4fb52dd47,
        mid_parallelSort_2bb946e8e836398c,
        mid_parallelSort_10bda464403ffea4,
        mid_parallelSort_5028934aad4f6fe8,
        mid_parallelSort_dc4e7afa5630877e,
        mid_parallelSort_a8d1402bec33a67d,
        mid_parallelSort_d55124a1b37f87c1,
        mid_parallelSort_e150c3cc997ad390,
        mid_parallelSort_d6debe4e77f2cbfd,
        mid_parallelSort_dbfcf4966a95fcec,
        mid_sort_a26f6ca2434b9208,
        mid_sort_856c2dcbbade9505,
        mid_sort_5e258682a98fb7d3,
        mid_sort_be43af8694a74b23,
        mid_sort_f60f11336830069c,
        mid_sort_f2e1c02cf13c6a0f,
        mid_sort_3e329dc6847f9d5a,
        mid_sort_0b042980913e0149,
        mid_sort_f5a12bd4fb52dd47,
        mid_sort_2bb946e8e836398c,
        mid_sort_d55124a1b37f87c1,
        mid_sort_5028934aad4f6fe8,
        mid_sort_dc4e7afa5630877e,
        mid_sort_a8d1402bec33a67d,
        mid_sort_003b30ebef31243c,
        mid_sort_d6debe4e77f2cbfd,
        mid_sort_10bda464403ffea4,
        mid_sort_dbfcf4966a95fcec,
        mid_spliterator_99e6ed3924bb60f8,
        mid_spliterator_54ff3fd97b29acf1,
        mid_spliterator_580545cc0669f08f,
        mid_spliterator_f54cb2aa636ccc56,
        mid_spliterator_35025e58ac035021,
        mid_spliterator_86a455a9e80b6aee,
        mid_spliterator_4d029f4217c16942,
        mid_spliterator_f66b009959951637,
        mid_toString_91755d64063a55bd,
        mid_toString_13b01975be3f8841,
        mid_toString_5c185003385dff8a,
        mid_toString_0ca189c428c0b202,
        mid_toString_3960d08dd19ad19f,
        mid_toString_7d6790bbd30430ea,
        mid_toString_7848c1f327425af7,
        mid_toString_65b1cd057c79c9ce,
        mid_toString_fb0a7beec5cfa88f,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Arrays(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Arrays(const Arrays& obj) : ::java::lang::Object(obj) {}

      static ::java::util::List asList(const JArray< ::java::lang::Object > &);
      static jint binarySearch(const JArray< jint > &, jint);
      static jint binarySearch(const JArray< jlong > &, jlong);
      static jint binarySearch(const JArray< ::java::lang::Object > &, const ::java::lang::Object &);
      static jint binarySearch(const JArray< jfloat > &, jfloat);
      static jint binarySearch(const JArray< jshort > &, jshort);
      static jint binarySearch(const JArray< jchar > &, jchar);
      static jint binarySearch(const JArray< jdouble > &, jdouble);
      static jint binarySearch(const JArray< jbyte > &, jbyte);
      static jint binarySearch(const JArray< ::java::lang::Object > &, const ::java::lang::Object &, const ::java::util::Comparator &);
      static jint binarySearch(const JArray< jint > &, jint, jint, jint);
      static jint binarySearch(const JArray< jlong > &, jint, jint, jlong);
      static jint binarySearch(const JArray< jfloat > &, jint, jint, jfloat);
      static jint binarySearch(const JArray< jdouble > &, jint, jint, jdouble);
      static jint binarySearch(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &);
      static jint binarySearch(const JArray< jshort > &, jint, jint, jshort);
      static jint binarySearch(const JArray< jchar > &, jint, jint, jchar);
      static jint binarySearch(const JArray< jbyte > &, jint, jint, jbyte);
      static jint binarySearch(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &, const ::java::util::Comparator &);
      static JArray< jfloat > copyOf(const JArray< jfloat > &, jint);
      static JArray< jchar > copyOf(const JArray< jchar > &, jint);
      static JArray< jlong > copyOf(const JArray< jlong > &, jint);
      static JArray< jdouble > copyOf(const JArray< jdouble > &, jint);
      static JArray< jboolean > copyOf(const JArray< jboolean > &, jint);
      static JArray< ::java::lang::Object > copyOf(const JArray< ::java::lang::Object > &, jint);
      static JArray< jbyte > copyOf(const JArray< jbyte > &, jint);
      static JArray< jshort > copyOf(const JArray< jshort > &, jint);
      static JArray< jint > copyOf(const JArray< jint > &, jint);
      static JArray< ::java::lang::Object > copyOf(const JArray< ::java::lang::Object > &, jint, const ::java::lang::Class &);
      static JArray< jbyte > copyOfRange(const JArray< jbyte > &, jint, jint);
      static JArray< jshort > copyOfRange(const JArray< jshort > &, jint, jint);
      static JArray< ::java::lang::Object > copyOfRange(const JArray< ::java::lang::Object > &, jint, jint);
      static JArray< jboolean > copyOfRange(const JArray< jboolean > &, jint, jint);
      static JArray< jdouble > copyOfRange(const JArray< jdouble > &, jint, jint);
      static JArray< jfloat > copyOfRange(const JArray< jfloat > &, jint, jint);
      static JArray< jint > copyOfRange(const JArray< jint > &, jint, jint);
      static JArray< jlong > copyOfRange(const JArray< jlong > &, jint, jint);
      static JArray< jchar > copyOfRange(const JArray< jchar > &, jint, jint);
      static JArray< ::java::lang::Object > copyOfRange(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Class &);
      static jboolean deepEquals(const JArray< ::java::lang::Object > &, const JArray< ::java::lang::Object > &);
      static jint deepHashCode(const JArray< ::java::lang::Object > &);
      static ::java::lang::String deepToString(const JArray< ::java::lang::Object > &);
      static jboolean equals(const JArray< jbyte > &, const JArray< jbyte > &);
      static jboolean equals(const JArray< jboolean > &, const JArray< jboolean > &);
      static jboolean equals(const JArray< jdouble > &, const JArray< jdouble > &);
      static jboolean equals(const JArray< jfloat > &, const JArray< jfloat > &);
      static jboolean equals(const JArray< ::java::lang::Object > &, const JArray< ::java::lang::Object > &);
      static jboolean equals(const JArray< jshort > &, const JArray< jshort > &);
      static jboolean equals(const JArray< jint > &, const JArray< jint > &);
      static jboolean equals(const JArray< jlong > &, const JArray< jlong > &);
      static jboolean equals(const JArray< jchar > &, const JArray< jchar > &);
      static void fill(const JArray< jfloat > &, jfloat);
      static void fill(const JArray< jdouble > &, jdouble);
      static void fill(const JArray< jlong > &, jlong);
      static void fill(const JArray< ::java::lang::Object > &, const ::java::lang::Object &);
      static void fill(const JArray< jchar > &, jchar);
      static void fill(const JArray< jbyte > &, jbyte);
      static void fill(const JArray< jboolean > &, jboolean);
      static void fill(const JArray< jshort > &, jshort);
      static void fill(const JArray< jint > &, jint);
      static void fill(const JArray< jdouble > &, jint, jint, jdouble);
      static void fill(const JArray< jboolean > &, jint, jint, jboolean);
      static void fill(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &);
      static void fill(const JArray< jfloat > &, jint, jint, jfloat);
      static void fill(const JArray< jchar > &, jint, jint, jchar);
      static void fill(const JArray< jbyte > &, jint, jint, jbyte);
      static void fill(const JArray< jlong > &, jint, jint, jlong);
      static void fill(const JArray< jint > &, jint, jint, jint);
      static void fill(const JArray< jshort > &, jint, jint, jshort);
      static jint hashCode(const JArray< jbyte > &);
      static jint hashCode(const JArray< jboolean > &);
      static jint hashCode(const JArray< jfloat > &);
      static jint hashCode(const JArray< jdouble > &);
      static jint hashCode(const JArray< jlong > &);
      static jint hashCode(const JArray< jint > &);
      static jint hashCode(const JArray< jshort > &);
      static jint hashCode(const JArray< jchar > &);
      static jint hashCode(const JArray< ::java::lang::Object > &);
      static void parallelSort(const JArray< jlong > &);
      static void parallelSort(const JArray< jbyte > &);
      static void parallelSort(const JArray< jfloat > &);
      static void parallelSort(const JArray< jdouble > &);
      static void parallelSort(const JArray< jshort > &);
      static void parallelSort(const JArray< jchar > &);
      static void parallelSort(const JArray< jint > &);
      static void parallelSort(const JArray< ::java::lang::Comparable > &);
      static void parallelSort(const JArray< ::java::lang::Object > &, const ::java::util::Comparator &);
      static void parallelSort(const JArray< jlong > &, jint, jint);
      static void parallelSort(const JArray< jint > &, jint, jint);
      static void parallelSort(const JArray< jfloat > &, jint, jint);
      static void parallelSort(const JArray< jchar > &, jint, jint);
      static void parallelSort(const JArray< jshort > &, jint, jint);
      static void parallelSort(const JArray< jbyte > &, jint, jint);
      static void parallelSort(const JArray< ::java::lang::Comparable > &, jint, jint);
      static void parallelSort(const JArray< jdouble > &, jint, jint);
      static void parallelSort(const JArray< ::java::lang::Object > &, jint, jint, const ::java::util::Comparator &);
      static void sort(const JArray< jlong > &);
      static void sort(const JArray< jfloat > &);
      static void sort(const JArray< jchar > &);
      static void sort(const JArray< jshort > &);
      static void sort(const JArray< jbyte > &);
      static void sort(const JArray< jint > &);
      static void sort(const JArray< ::java::lang::Object > &);
      static void sort(const JArray< jdouble > &);
      static void sort(const JArray< ::java::lang::Object > &, const ::java::util::Comparator &);
      static void sort(const JArray< jlong > &, jint, jint);
      static void sort(const JArray< jbyte > &, jint, jint);
      static void sort(const JArray< jfloat > &, jint, jint);
      static void sort(const JArray< jchar > &, jint, jint);
      static void sort(const JArray< jshort > &, jint, jint);
      static void sort(const JArray< ::java::lang::Object > &, jint, jint);
      static void sort(const JArray< jdouble > &, jint, jint);
      static void sort(const JArray< jint > &, jint, jint);
      static void sort(const JArray< ::java::lang::Object > &, jint, jint, const ::java::util::Comparator &);
      static ::java::util::Spliterator$OfLong spliterator(const JArray< jlong > &);
      static ::java::util::Spliterator$OfDouble spliterator(const JArray< jdouble > &);
      static ::java::util::Spliterator spliterator(const JArray< ::java::lang::Object > &);
      static ::java::util::Spliterator$OfInt spliterator(const JArray< jint > &);
      static ::java::util::Spliterator$OfLong spliterator(const JArray< jlong > &, jint, jint);
      static ::java::util::Spliterator$OfInt spliterator(const JArray< jint > &, jint, jint);
      static ::java::util::Spliterator$OfDouble spliterator(const JArray< jdouble > &, jint, jint);
      static ::java::util::Spliterator spliterator(const JArray< ::java::lang::Object > &, jint, jint);
      static ::java::lang::String toString(const JArray< jboolean > &);
      static ::java::lang::String toString(const JArray< jbyte > &);
      static ::java::lang::String toString(const JArray< jfloat > &);
      static ::java::lang::String toString(const JArray< jdouble > &);
      static ::java::lang::String toString(const JArray< jlong > &);
      static ::java::lang::String toString(const JArray< jint > &);
      static ::java::lang::String toString(const JArray< jshort > &);
      static ::java::lang::String toString(const JArray< jchar > &);
      static ::java::lang::String toString(const JArray< ::java::lang::Object > &);
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyTypeObject PY_TYPE(Arrays);

    class t_Arrays {
    public:
      PyObject_HEAD
      Arrays object;
      static PyObject *wrap_Object(const Arrays&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
