#ifndef java_io_File_H
#define java_io_File_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class FilenameFilter;
    class IOException;
    class FileFilter;
    class Serializable;
  }
  namespace lang {
    class Class;
    class Comparable;
    class String;
  }
  namespace nio {
    namespace file {
      class Path;
    }
  }
}
template<class T> class JArray;

namespace java {
  namespace io {

    class File : public ::java::lang::Object {
    public:
      enum {
        mid_init$_3e4369e088f8ac83,
        mid_init$_46d41479e8b3fcde,
        mid_init$_a058f4a46eb4ecab,
        mid_canExecute_cc8de42f0a91785b,
        mid_canRead_cc8de42f0a91785b,
        mid_canWrite_cc8de42f0a91785b,
        mid_compareTo_ac20b70957a9bd63,
        mid_createNewFile_cc8de42f0a91785b,
        mid_createTempFile_2e2771d13ede1749,
        mid_createTempFile_7d8739c615dda2a3,
        mid_delete_cc8de42f0a91785b,
        mid_deleteOnExit_baea6bf243e2d9b8,
        mid_equals_55f7ed877b4720ef,
        mid_exists_cc8de42f0a91785b,
        mid_getAbsoluteFile_564f088f6889df25,
        mid_getAbsolutePath_8cdd42a672015029,
        mid_getCanonicalFile_564f088f6889df25,
        mid_getCanonicalPath_8cdd42a672015029,
        mid_getFreeSpace_25efeb8f9279460d,
        mid_getName_8cdd42a672015029,
        mid_getParent_8cdd42a672015029,
        mid_getParentFile_564f088f6889df25,
        mid_getPath_8cdd42a672015029,
        mid_getTotalSpace_25efeb8f9279460d,
        mid_getUsableSpace_25efeb8f9279460d,
        mid_hashCode_c6ef1683adc87377,
        mid_isAbsolute_cc8de42f0a91785b,
        mid_isDirectory_cc8de42f0a91785b,
        mid_isFile_cc8de42f0a91785b,
        mid_isHidden_cc8de42f0a91785b,
        mid_lastModified_25efeb8f9279460d,
        mid_length_25efeb8f9279460d,
        mid_list_aab503f7866a0311,
        mid_list_fe7cafe0b7f6ec62,
        mid_listFiles_068487c890c31a2f,
        mid_listFiles_327760a72af3099d,
        mid_listFiles_4ded54e9dbc52b0b,
        mid_listRoots_068487c890c31a2f,
        mid_mkdir_cc8de42f0a91785b,
        mid_mkdirs_cc8de42f0a91785b,
        mid_renameTo_4874a79068738d87,
        mid_setExecutable_7d83bd8084e0312a,
        mid_setExecutable_cee5ba238a6fdab8,
        mid_setLastModified_b4fd5d865937b320,
        mid_setReadOnly_cc8de42f0a91785b,
        mid_setReadable_7d83bd8084e0312a,
        mid_setReadable_cee5ba238a6fdab8,
        mid_setWritable_7d83bd8084e0312a,
        mid_setWritable_cee5ba238a6fdab8,
        mid_toPath_0bb2ab76b9113e16,
        mid_toString_8cdd42a672015029,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit File(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      File(const File& obj) : ::java::lang::Object(obj) {}

      static ::java::lang::String *pathSeparator;
      static jchar pathSeparatorChar;
      static ::java::lang::String *separator;
      static jchar separatorChar;

      File(const ::java::lang::String &);
      File(const ::java::lang::String &, const ::java::lang::String &);
      File(const File &, const ::java::lang::String &);

      jboolean canExecute() const;
      jboolean canRead() const;
      jboolean canWrite() const;
      jint compareTo(const File &) const;
      jboolean createNewFile() const;
      static File createTempFile(const ::java::lang::String &, const ::java::lang::String &);
      static File createTempFile(const ::java::lang::String &, const ::java::lang::String &, const File &);
      jboolean delete$() const;
      void deleteOnExit() const;
      jboolean equals(const ::java::lang::Object &) const;
      jboolean exists() const;
      File getAbsoluteFile() const;
      ::java::lang::String getAbsolutePath() const;
      File getCanonicalFile() const;
      ::java::lang::String getCanonicalPath() const;
      jlong getFreeSpace() const;
      ::java::lang::String getName() const;
      ::java::lang::String getParent() const;
      File getParentFile() const;
      ::java::lang::String getPath() const;
      jlong getTotalSpace() const;
      jlong getUsableSpace() const;
      jint hashCode() const;
      jboolean isAbsolute() const;
      jboolean isDirectory() const;
      jboolean isFile() const;
      jboolean isHidden() const;
      jlong lastModified() const;
      jlong length() const;
      JArray< ::java::lang::String > list() const;
      JArray< ::java::lang::String > list(const ::java::io::FilenameFilter &) const;
      JArray< File > listFiles() const;
      JArray< File > listFiles(const ::java::io::FilenameFilter &) const;
      JArray< File > listFiles(const ::java::io::FileFilter &) const;
      static JArray< File > listRoots();
      jboolean mkdir() const;
      jboolean mkdirs() const;
      jboolean renameTo(const File &) const;
      jboolean setExecutable(jboolean) const;
      jboolean setExecutable(jboolean, jboolean) const;
      jboolean setLastModified(jlong) const;
      jboolean setReadOnly() const;
      jboolean setReadable(jboolean) const;
      jboolean setReadable(jboolean, jboolean) const;
      jboolean setWritable(jboolean) const;
      jboolean setWritable(jboolean, jboolean) const;
      ::java::nio::file::Path toPath() const;
      ::java::lang::String toString() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace io {
    extern PyTypeObject PY_TYPE(File);

    class t_File {
    public:
      PyObject_HEAD
      File object;
      static PyObject *wrap_Object(const File&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
