#ifndef java_nio_file_Path_H
#define java_nio_file_Path_H

#include "java/lang/Comparable.h"

namespace java {
  namespace nio {
    namespace file {
      class WatchService;
      class Watchable;
      class WatchEvent$Kind;
      class WatchKey;
      class LinkOption;
      class FileSystem;
      class WatchEvent$Modifier;
    }
  }
  namespace io {
    class IOException;
    class File;
  }
  namespace lang {
    class Class;
    class Iterable;
    class Object;
    class String;
  }
  namespace util {
    class Iterator;
  }
}
template<class T> class JArray;

namespace java {
  namespace nio {
    namespace file {

      class Path : public ::java::lang::Comparable {
      public:
        enum {
          mid_compareTo_af84c2a0f8da8cf7,
          mid_endsWith_e428191c9abe97cd,
          mid_endsWith_177bcec85256f1a1,
          mid_equals_55f7ed877b4720ef,
          mid_getFileName_0bb2ab76b9113e16,
          mid_getFileSystem_d3d560f994bb45c6,
          mid_getName_9100028be7629859,
          mid_getNameCount_c6ef1683adc87377,
          mid_getParent_0bb2ab76b9113e16,
          mid_getRoot_0bb2ab76b9113e16,
          mid_hashCode_c6ef1683adc87377,
          mid_isAbsolute_cc8de42f0a91785b,
          mid_iterator_5044241792d27377,
          mid_normalize_0bb2ab76b9113e16,
          mid_register_fcfb43a2852627e6,
          mid_register_58703fee06490b39,
          mid_relativize_5d83dae4a423d5f3,
          mid_resolve_5d83dae4a423d5f3,
          mid_resolve_9b47c67825f03325,
          mid_resolveSibling_5d83dae4a423d5f3,
          mid_resolveSibling_9b47c67825f03325,
          mid_startsWith_e428191c9abe97cd,
          mid_startsWith_177bcec85256f1a1,
          mid_subpath_5d3e3a9c8bbea26c,
          mid_toAbsolutePath_0bb2ab76b9113e16,
          mid_toFile_564f088f6889df25,
          mid_toRealPath_5d7eb60ff67b2af7,
          mid_toString_8cdd42a672015029,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit Path(jobject obj) : ::java::lang::Comparable(obj) {
          if (obj != NULL)
            env->getClass(initializeClass);
        }
        Path(const Path& obj) : ::java::lang::Comparable(obj) {}

        jint compareTo(const Path &) const;
        jboolean endsWith(const ::java::lang::String &) const;
        jboolean endsWith(const Path &) const;
        jboolean equals(const ::java::lang::Object &) const;
        Path getFileName() const;
        ::java::nio::file::FileSystem getFileSystem() const;
        Path getName(jint) const;
        jint getNameCount() const;
        Path getParent() const;
        Path getRoot() const;
        jint hashCode() const;
        jboolean isAbsolute() const;
        ::java::util::Iterator iterator() const;
        Path normalize() const;
        ::java::nio::file::WatchKey register$(const ::java::nio::file::WatchService &, const JArray< ::java::nio::file::WatchEvent$Kind > &) const;
        ::java::nio::file::WatchKey register$(const ::java::nio::file::WatchService &, const JArray< ::java::nio::file::WatchEvent$Kind > &, const JArray< ::java::nio::file::WatchEvent$Modifier > &) const;
        Path relativize(const Path &) const;
        Path resolve(const Path &) const;
        Path resolve(const ::java::lang::String &) const;
        Path resolveSibling(const Path &) const;
        Path resolveSibling(const ::java::lang::String &) const;
        jboolean startsWith(const ::java::lang::String &) const;
        jboolean startsWith(const Path &) const;
        Path subpath(jint, jint) const;
        Path toAbsolutePath() const;
        ::java::io::File toFile() const;
        Path toRealPath(const JArray< ::java::nio::file::LinkOption > &) const;
        ::java::lang::String toString() const;
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace nio {
    namespace file {
      extern PyTypeObject PY_TYPE(Path);

      class t_Path {
      public:
        PyObject_HEAD
        Path object;
        static PyObject *wrap_Object(const Path&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
