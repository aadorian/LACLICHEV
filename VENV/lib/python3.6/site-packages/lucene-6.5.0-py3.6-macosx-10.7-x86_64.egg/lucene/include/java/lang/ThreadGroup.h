#ifndef java_lang_ThreadGroup_H
#define java_lang_ThreadGroup_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class String;
    class Throwable;
    class Thread;
    class Thread$UncaughtExceptionHandler;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class ThreadGroup : public ::java::lang::Object {
    public:
      enum {
        mid_init$_3e4369e088f8ac83,
        mid_init$_5526ecd90dec7bf2,
        mid_activeCount_c6ef1683adc87377,
        mid_activeGroupCount_c6ef1683adc87377,
        mid_allowThreadSuspension_7d83bd8084e0312a,
        mid_checkAccess_baea6bf243e2d9b8,
        mid_destroy_baea6bf243e2d9b8,
        mid_enumerate_823e18e4b4d3ec00,
        mid_enumerate_437541033faefa4e,
        mid_enumerate_a47c9bb0202bdda4,
        mid_enumerate_be7bca6e1a37ec01,
        mid_getMaxPriority_c6ef1683adc87377,
        mid_getName_8cdd42a672015029,
        mid_getParent_203838e59b36f36e,
        mid_interrupt_baea6bf243e2d9b8,
        mid_isDaemon_cc8de42f0a91785b,
        mid_isDestroyed_cc8de42f0a91785b,
        mid_list_baea6bf243e2d9b8,
        mid_parentOf_0ba266fb16e1fe10,
        mid_resume_baea6bf243e2d9b8,
        mid_setDaemon_787a33a11683567e,
        mid_setMaxPriority_e3e5f5ff373509b3,
        mid_stop_baea6bf243e2d9b8,
        mid_suspend_baea6bf243e2d9b8,
        mid_toString_8cdd42a672015029,
        mid_uncaughtException_52c884a1252d7111,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit ThreadGroup(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      ThreadGroup(const ThreadGroup& obj) : ::java::lang::Object(obj) {}

      ThreadGroup(const ::java::lang::String &);
      ThreadGroup(const ThreadGroup &, const ::java::lang::String &);

      jint activeCount() const;
      jint activeGroupCount() const;
      jboolean allowThreadSuspension(jboolean) const;
      void checkAccess() const;
      void destroy() const;
      jint enumerate(const JArray< ::java::lang::Thread > &) const;
      jint enumerate(const JArray< ThreadGroup > &) const;
      jint enumerate(const JArray< ThreadGroup > &, jboolean) const;
      jint enumerate(const JArray< ::java::lang::Thread > &, jboolean) const;
      jint getMaxPriority() const;
      ::java::lang::String getName() const;
      ThreadGroup getParent() const;
      void interrupt() const;
      jboolean isDaemon() const;
      jboolean isDestroyed() const;
      void list() const;
      jboolean parentOf(const ThreadGroup &) const;
      void resume() const;
      void setDaemon(jboolean) const;
      void setMaxPriority(jint) const;
      void stop() const;
      void suspend() const;
      ::java::lang::String toString() const;
      void uncaughtException(const ::java::lang::Thread &, const ::java::lang::Throwable &) const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(ThreadGroup);

    class t_ThreadGroup {
    public:
      PyObject_HEAD
      ThreadGroup object;
      static PyObject *wrap_Object(const ThreadGroup&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
