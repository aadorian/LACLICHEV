#ifndef java_nio_file_Files_H
#define java_nio_file_Files_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Set;
    class Map;
    class List;
  }
  namespace io {
    class OutputStream;
    class BufferedReader;
    class BufferedWriter;
    class IOException;
    class InputStream;
  }
  namespace nio {
    namespace file {
      class FileVisitor;
      class Path;
      class FileVisitOption;
      class CopyOption;
      class OpenOption;
      class DirectoryStream;
      class DirectoryStream$Filter;
      class LinkOption;
      class FileStore;
    }
  }
  namespace lang {
    class Class;
    class CharSequence;
    class Iterable;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace nio {
    namespace file {

      class Files : public ::java::lang::Object {
      public:
        enum {
          mid_copy_1a27b08cfe07d346,
          mid_copy_f1126548e8d99569,
          mid_copy_c22ec8d33b6d3acd,
          mid_createLink_ac3d9c8045a11fe9,
          mid_delete_cde5c34f3ed3eca5,
          mid_deleteIfExists_177bcec85256f1a1,
          mid_exists_6551bfa4edbfc198,
          mid_getAttribute_4361337ba6312b66,
          mid_getFileStore_bd8371849cecff68,
          mid_isDirectory_6551bfa4edbfc198,
          mid_isExecutable_177bcec85256f1a1,
          mid_isHidden_177bcec85256f1a1,
          mid_isReadable_177bcec85256f1a1,
          mid_isRegularFile_6551bfa4edbfc198,
          mid_isSameFile_4355b8ba0aa73030,
          mid_isSymbolicLink_177bcec85256f1a1,
          mid_isWritable_177bcec85256f1a1,
          mid_move_f1126548e8d99569,
          mid_newBufferedReader_be7e6d815a194f8d,
          mid_newBufferedWriter_8d2f9007b9124452,
          mid_newDirectoryStream_b44079def5f4966f,
          mid_newDirectoryStream_dd964764e15b070f,
          mid_newDirectoryStream_3c199870dc7d494e,
          mid_newInputStream_07fd5f4a9cdd72aa,
          mid_newOutputStream_52a7a2d2c538a66a,
          mid_notExists_6551bfa4edbfc198,
          mid_probeContentType_089deac592769f21,
          mid_readAllBytes_8a5bd62249db0a5f,
          mid_readAllLines_4c489a9ac06c90ab,
          mid_readAttributes_841ddc8ff982236e,
          mid_readSymbolicLink_5d83dae4a423d5f3,
          mid_setAttribute_4f1001e8d29f6614,
          mid_size_e02f63c2fb25250d,
          mid_walkFileTree_629251adc955a349,
          mid_walkFileTree_9ff412a6184e33b0,
          mid_write_d804c60d64cb9272,
          mid_write_4a9a97e72c75b83d,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit Files(jobject obj) : ::java::lang::Object(obj) {
          if (obj != NULL)
            env->getClass(initializeClass);
        }
        Files(const Files& obj) : ::java::lang::Object(obj) {}

        static jlong copy(const ::java::nio::file::Path &, const ::java::io::OutputStream &);
        static ::java::nio::file::Path copy(const ::java::nio::file::Path &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static jlong copy(const ::java::io::InputStream &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static ::java::nio::file::Path createLink(const ::java::nio::file::Path &, const ::java::nio::file::Path &);
        static void delete$(const ::java::nio::file::Path &);
        static jboolean deleteIfExists(const ::java::nio::file::Path &);
        static jboolean exists(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::lang::Object getAttribute(const ::java::nio::file::Path &, const ::java::lang::String &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::nio::file::FileStore getFileStore(const ::java::nio::file::Path &);
        static jboolean isDirectory(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static jboolean isExecutable(const ::java::nio::file::Path &);
        static jboolean isHidden(const ::java::nio::file::Path &);
        static jboolean isReadable(const ::java::nio::file::Path &);
        static jboolean isRegularFile(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static jboolean isSameFile(const ::java::nio::file::Path &, const ::java::nio::file::Path &);
        static jboolean isSymbolicLink(const ::java::nio::file::Path &);
        static jboolean isWritable(const ::java::nio::file::Path &);
        static ::java::nio::file::Path move(const ::java::nio::file::Path &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static ::java::io::BufferedReader newBufferedReader(const ::java::nio::file::Path &);
        static ::java::io::BufferedWriter newBufferedWriter(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &, const ::java::nio::file::DirectoryStream$Filter &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &, const ::java::lang::String &);
        static ::java::io::InputStream newInputStream(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::io::OutputStream newOutputStream(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static jboolean notExists(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::lang::String probeContentType(const ::java::nio::file::Path &);
        static JArray< jbyte > readAllBytes(const ::java::nio::file::Path &);
        static ::java::util::List readAllLines(const ::java::nio::file::Path &);
        static ::java::util::Map readAttributes(const ::java::nio::file::Path &, const ::java::lang::String &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::nio::file::Path readSymbolicLink(const ::java::nio::file::Path &);
        static ::java::nio::file::Path setAttribute(const ::java::nio::file::Path &, const ::java::lang::String &, const ::java::lang::Object &, const JArray< ::java::nio::file::LinkOption > &);
        static jlong size(const ::java::nio::file::Path &);
        static ::java::nio::file::Path walkFileTree(const ::java::nio::file::Path &, const ::java::nio::file::FileVisitor &);
        static ::java::nio::file::Path walkFileTree(const ::java::nio::file::Path &, const ::java::util::Set &, jint, const ::java::nio::file::FileVisitor &);
        static ::java::nio::file::Path write(const ::java::nio::file::Path &, const JArray< jbyte > &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::nio::file::Path write(const ::java::nio::file::Path &, const ::java::lang::Iterable &, const JArray< ::java::nio::file::OpenOption > &);
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace nio {
    namespace file {
      extern PyTypeObject PY_TYPE(Files);

      class t_Files {
      public:
        PyObject_HEAD
        Files object;
        static PyObject *wrap_Object(const Files&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
