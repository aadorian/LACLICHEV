#ifndef java_lang_AbstractStringBuilder_H
#define java_lang_AbstractStringBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Appendable;
    class Class;
    class CharSequence;
    class StringBuffer;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class AbstractStringBuilder : public ::java::lang::Object {
    public:
      enum {
        mid_append_cdc5cd7a827270fb,
        mid_append_d205f5de6c26fba6,
        mid_append_97259a195e35e556,
        mid_append_f8ff5998ac9cdc87,
        mid_append_929bc6e0a7be9b88,
        mid_append_81c195f5f7ac055a,
        mid_append_61aa029a6ee8432b,
        mid_append_34b54220d0ede08f,
        mid_append_710fb463b8623e07,
        mid_append_18a4fadccc481240,
        mid_append_1b505a77e03ad527,
        mid_append_40dbb21e8af4eb60,
        mid_append_d557314e35dd3b0e,
        mid_appendCodePoint_710fb463b8623e07,
        mid_capacity_c6ef1683adc87377,
        mid_charAt_d9ac27cd414dde64,
        mid_codePointAt_eb4f2d82869c338b,
        mid_codePointBefore_eb4f2d82869c338b,
        mid_codePointCount_9ebb972a63d3bb3c,
        mid_delete_98dfb3a025cc7574,
        mid_deleteCharAt_710fb463b8623e07,
        mid_ensureCapacity_e3e5f5ff373509b3,
        mid_getChars_9fc2bdd16efcaf84,
        mid_indexOf_07a398a2298c97a7,
        mid_indexOf_0159111ae701015e,
        mid_insert_cb9a812cadf38374,
        mid_insert_f9ba99a67e13b267,
        mid_insert_ce28d5ae83bd9e16,
        mid_insert_de7c296ebb0d513b,
        mid_insert_15301d3386e536e5,
        mid_insert_3625f535e543528f,
        mid_insert_88e63982fec9c1b6,
        mid_insert_98dfb3a025cc7574,
        mid_insert_422d4318c965aca8,
        mid_insert_94d6c345bf17735e,
        mid_insert_6fdb055a84416ef8,
        mid_insert_0086877f84a9daef,
        mid_lastIndexOf_07a398a2298c97a7,
        mid_lastIndexOf_0159111ae701015e,
        mid_length_c6ef1683adc87377,
        mid_offsetByCodePoints_9ebb972a63d3bb3c,
        mid_replace_c5335cc6cacb9817,
        mid_reverse_032c6d8a67414826,
        mid_setCharAt_31e26039b3272f80,
        mid_setLength_e3e5f5ff373509b3,
        mid_subSequence_27c48fefeb6bdcd7,
        mid_substring_e5ab4ec225f780e9,
        mid_substring_2f188a32ac95e8d9,
        mid_toString_8cdd42a672015029,
        mid_trimToSize_baea6bf243e2d9b8,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit AbstractStringBuilder(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      AbstractStringBuilder(const AbstractStringBuilder& obj) : ::java::lang::Object(obj) {}

      AbstractStringBuilder append(const JArray< jchar > &) const;
      AbstractStringBuilder append(jboolean) const;
      AbstractStringBuilder append(jchar) const;
      AbstractStringBuilder append(const ::java::lang::CharSequence &) const;
      AbstractStringBuilder append(const ::java::lang::StringBuffer &) const;
      AbstractStringBuilder append(jdouble) const;
      AbstractStringBuilder append(jfloat) const;
      AbstractStringBuilder append(jlong) const;
      AbstractStringBuilder append(jint) const;
      AbstractStringBuilder append(const ::java::lang::String &) const;
      AbstractStringBuilder append(const ::java::lang::Object &) const;
      AbstractStringBuilder append(const JArray< jchar > &, jint, jint) const;
      AbstractStringBuilder append(const ::java::lang::CharSequence &, jint, jint) const;
      AbstractStringBuilder appendCodePoint(jint) const;
      jint capacity() const;
      jchar charAt(jint) const;
      jint codePointAt(jint) const;
      jint codePointBefore(jint) const;
      jint codePointCount(jint, jint) const;
      AbstractStringBuilder delete$(jint, jint) const;
      AbstractStringBuilder deleteCharAt(jint) const;
      void ensureCapacity(jint) const;
      void getChars(jint, jint, const JArray< jchar > &, jint) const;
      jint indexOf(const ::java::lang::String &) const;
      jint indexOf(const ::java::lang::String &, jint) const;
      AbstractStringBuilder insert(jint, jlong) const;
      AbstractStringBuilder insert(jint, jfloat) const;
      AbstractStringBuilder insert(jint, jdouble) const;
      AbstractStringBuilder insert(jint, const ::java::lang::Object &) const;
      AbstractStringBuilder insert(jint, const ::java::lang::CharSequence &) const;
      AbstractStringBuilder insert(jint, const ::java::lang::String &) const;
      AbstractStringBuilder insert(jint, const JArray< jchar > &) const;
      AbstractStringBuilder insert(jint, jint) const;
      AbstractStringBuilder insert(jint, jchar) const;
      AbstractStringBuilder insert(jint, jboolean) const;
      AbstractStringBuilder insert(jint, const ::java::lang::CharSequence &, jint, jint) const;
      AbstractStringBuilder insert(jint, const JArray< jchar > &, jint, jint) const;
      jint lastIndexOf(const ::java::lang::String &) const;
      jint lastIndexOf(const ::java::lang::String &, jint) const;
      jint length() const;
      jint offsetByCodePoints(jint, jint) const;
      AbstractStringBuilder replace(jint, jint, const ::java::lang::String &) const;
      AbstractStringBuilder reverse() const;
      void setCharAt(jint, jchar) const;
      void setLength(jint) const;
      ::java::lang::CharSequence subSequence(jint, jint) const;
      ::java::lang::String substring(jint) const;
      ::java::lang::String substring(jint, jint) const;
      ::java::lang::String toString() const;
      void trimToSize() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(AbstractStringBuilder);

    class t_AbstractStringBuilder {
    public:
      PyObject_HEAD
      AbstractStringBuilder object;
      static PyObject *wrap_Object(const AbstractStringBuilder&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
