#ifndef java_lang_Short_H
#define java_lang_Short_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class NumberFormatException;
    class Class;
    class Comparable;
    class Object;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Short : public ::java::lang::Number {
    public:
      enum {
        mid_init$_2474cc40d14d9cd2,
        mid_init$_3e4369e088f8ac83,
        mid_byteValue_9714a86531c8152d,
        mid_compare_876060ddd1af430c,
        mid_compareTo_f21f4fb2c060abe6,
        mid_decode_49da5a5e0d546eab,
        mid_doubleValue_44067586fec56606,
        mid_equals_55f7ed877b4720ef,
        mid_floatValue_388e059cf45fb2f9,
        mid_hashCode_c6ef1683adc87377,
        mid_hashCode_6d513d1a4a5d9cb8,
        mid_intValue_c6ef1683adc87377,
        mid_longValue_25efeb8f9279460d,
        mid_parseShort_73f9539d83be5168,
        mid_parseShort_c16822875ef0eaad,
        mid_reverseBytes_3e1e8962bdfece39,
        mid_shortValue_6687947706ee7380,
        mid_toString_8cdd42a672015029,
        mid_toString_ca85f0781e92121a,
        mid_toUnsignedInt_6d513d1a4a5d9cb8,
        mid_toUnsignedLong_6a59a4a38d59c0ad,
        mid_valueOf_633f84705eee20e9,
        mid_valueOf_49da5a5e0d546eab,
        mid_valueOf_3b555070a7e72029,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Short(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Short(const Short& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jshort MAX_VALUE;
      static jshort MIN_VALUE;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Short(jshort);
      Short(const ::java::lang::String &);

      jbyte byteValue() const;
      static jint compare(jshort, jshort);
      jint compareTo(const Short &) const;
      static Short decode(const ::java::lang::String &);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jshort);
      jint intValue() const;
      jlong longValue() const;
      static jshort parseShort(const ::java::lang::String &);
      static jshort parseShort(const ::java::lang::String &, jint);
      static jshort reverseBytes(jshort);
      jshort shortValue() const;
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jshort);
      static jint toUnsignedInt(jshort);
      static jlong toUnsignedLong(jshort);
      static Short valueOf(jshort);
      static Short valueOf(const ::java::lang::String &);
      static Short valueOf(const ::java::lang::String &, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(Short);

    class t_Short {
    public:
      PyObject_HEAD
      Short object;
      static PyObject *wrap_Object(const Short&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
