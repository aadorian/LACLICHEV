#ifndef java_lang_Boolean_H
#define java_lang_Boolean_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class Comparable;
    class String;
  }
  namespace io {
    class Serializable;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Boolean : public ::java::lang::Object {
    public:
      enum {
        mid_init$_787a33a11683567e,
        mid_init$_3e4369e088f8ac83,
        mid_booleanValue_cc8de42f0a91785b,
        mid_compare_40ebfc99c03f2b10,
        mid_compareTo_d4759578da2b77ef,
        mid_equals_55f7ed877b4720ef,
        mid_getBoolean_e428191c9abe97cd,
        mid_hashCode_c6ef1683adc87377,
        mid_hashCode_66222bd27cbd4c66,
        mid_logicalAnd_cee5ba238a6fdab8,
        mid_logicalOr_cee5ba238a6fdab8,
        mid_logicalXor_cee5ba238a6fdab8,
        mid_parseBoolean_e428191c9abe97cd,
        mid_toString_8cdd42a672015029,
        mid_toString_e15c13cf7c34a00b,
        mid_valueOf_fb98d2dfa040f4b9,
        mid_valueOf_a0c885161b8f08e3,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Boolean(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Boolean(const Boolean& obj) : ::java::lang::Object(obj) {}

      static Boolean *FALSE;
      static Boolean *TRUE;
      static ::java::lang::Class *TYPE;

      Boolean(jboolean);
      Boolean(const ::java::lang::String &);

      jboolean booleanValue() const;
      static jint compare(jboolean, jboolean);
      jint compareTo(const Boolean &) const;
      jboolean equals(const ::java::lang::Object &) const;
      static jboolean getBoolean(const ::java::lang::String &);
      jint hashCode() const;
      static jint hashCode(jboolean);
      static jboolean logicalAnd(jboolean, jboolean);
      static jboolean logicalOr(jboolean, jboolean);
      static jboolean logicalXor(jboolean, jboolean);
      static jboolean parseBoolean(const ::java::lang::String &);
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jboolean);
      static Boolean valueOf(const ::java::lang::String &);
      static Boolean valueOf(jboolean);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(Boolean);

    class t_Boolean {
    public:
      PyObject_HEAD
      Boolean object;
      static PyObject *wrap_Object(const Boolean&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
