#ifndef java_lang_Thread_H
#define java_lang_Thread_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Runnable;
    class ClassLoader;
    class ThreadGroup;
    class Class;
    class StackTraceElement;
    class String;
    class Thread$State;
    class InterruptedException;
    class Throwable;
    class Thread$UncaughtExceptionHandler;
  }
  namespace util {
    class Map;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Thread : public ::java::lang::Object {
    public:
      enum {
        mid_init$_baea6bf243e2d9b8,
        mid_init$_e4cb596702741c44,
        mid_init$_3e4369e088f8ac83,
        mid_init$_524cc35eb0864428,
        mid_init$_5526ecd90dec7bf2,
        mid_init$_06e397954974d3bc,
        mid_init$_780ea4b5db40bc13,
        mid_init$_0984149aa96424da,
        mid_activeCount_c6ef1683adc87377,
        mid_checkAccess_baea6bf243e2d9b8,
        mid_countStackFrames_c6ef1683adc87377,
        mid_currentThread_2a698b4b4447a45b,
        mid_destroy_baea6bf243e2d9b8,
        mid_dumpStack_baea6bf243e2d9b8,
        mid_enumerate_823e18e4b4d3ec00,
        mid_getAllStackTraces_f44c49bd487dca3f,
        mid_getContextClassLoader_bf93bb41b6fc5978,
        mid_getDefaultUncaughtExceptionHandler_4fabb6be96663e20,
        mid_getId_25efeb8f9279460d,
        mid_getName_8cdd42a672015029,
        mid_getPriority_c6ef1683adc87377,
        mid_getStackTrace_e81c6d763ec9c27a,
        mid_getState_fc0da6e6fb1eb25c,
        mid_getThreadGroup_203838e59b36f36e,
        mid_getUncaughtExceptionHandler_4fabb6be96663e20,
        mid_holdsLock_55f7ed877b4720ef,
        mid_interrupt_baea6bf243e2d9b8,
        mid_interrupted_cc8de42f0a91785b,
        mid_isAlive_cc8de42f0a91785b,
        mid_isDaemon_cc8de42f0a91785b,
        mid_isInterrupted_cc8de42f0a91785b,
        mid_join_baea6bf243e2d9b8,
        mid_join_ea7e2607a44304f3,
        mid_join_d0a90b3da9666500,
        mid_resume_baea6bf243e2d9b8,
        mid_run_baea6bf243e2d9b8,
        mid_setContextClassLoader_af8f127c5efa4df2,
        mid_setDaemon_787a33a11683567e,
        mid_setDefaultUncaughtExceptionHandler_e09b53d3dbc8dc68,
        mid_setName_3e4369e088f8ac83,
        mid_setPriority_e3e5f5ff373509b3,
        mid_setUncaughtExceptionHandler_e09b53d3dbc8dc68,
        mid_sleep_ea7e2607a44304f3,
        mid_sleep_d0a90b3da9666500,
        mid_start_baea6bf243e2d9b8,
        mid_stop_baea6bf243e2d9b8,
        mid_stop_88ff72e6290490db,
        mid_suspend_baea6bf243e2d9b8,
        mid_toString_8cdd42a672015029,
        mid_yield_baea6bf243e2d9b8,
        mid_clone_fcd621d44e119d75,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Thread(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Thread(const Thread& obj) : ::java::lang::Object(obj) {}

      static jint MAX_PRIORITY;
      static jint MIN_PRIORITY;
      static jint NORM_PRIORITY;

      Thread();
      Thread(const ::java::lang::Runnable &);
      Thread(const ::java::lang::String &);
      Thread(const ::java::lang::Runnable &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &, const ::java::lang::String &, jlong);

      static jint activeCount();
      void checkAccess() const;
      jint countStackFrames() const;
      static Thread currentThread();
      void destroy() const;
      static void dumpStack();
      static jint enumerate(const JArray< Thread > &);
      static ::java::util::Map getAllStackTraces();
      ::java::lang::ClassLoader getContextClassLoader() const;
      static ::java::lang::Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
      jlong getId() const;
      ::java::lang::String getName() const;
      jint getPriority() const;
      JArray< ::java::lang::StackTraceElement > getStackTrace() const;
      ::java::lang::Thread$State getState() const;
      ::java::lang::ThreadGroup getThreadGroup() const;
      ::java::lang::Thread$UncaughtExceptionHandler getUncaughtExceptionHandler() const;
      static jboolean holdsLock(const ::java::lang::Object &);
      void interrupt() const;
      static jboolean interrupted();
      jboolean isAlive() const;
      jboolean isDaemon() const;
      jboolean isInterrupted() const;
      void join() const;
      void join(jlong) const;
      void join(jlong, jint) const;
      void resume() const;
      void run() const;
      void setContextClassLoader(const ::java::lang::ClassLoader &) const;
      void setDaemon(jboolean) const;
      static void setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler &);
      void setName(const ::java::lang::String &) const;
      void setPriority(jint) const;
      void setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler &) const;
      static void sleep(jlong);
      static void sleep(jlong, jint);
      void start() const;
      void stop() const;
      void stop(const ::java::lang::Throwable &) const;
      void suspend() const;
      ::java::lang::String toString() const;
      static void yield();
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(Thread);

    class t_Thread {
    public:
      PyObject_HEAD
      Thread object;
      static PyObject *wrap_Object(const Thread&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
