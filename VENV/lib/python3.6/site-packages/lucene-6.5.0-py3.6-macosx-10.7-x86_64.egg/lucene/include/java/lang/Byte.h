#ifndef java_lang_Byte_H
#define java_lang_Byte_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class NumberFormatException;
    class Class;
    class Comparable;
    class Object;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Byte : public ::java::lang::Number {
    public:
      enum {
        mid_init$_65a74eed9ce5d965,
        mid_init$_3e4369e088f8ac83,
        mid_byteValue_9714a86531c8152d,
        mid_compare_1d3133dc9e6cdb48,
        mid_compareTo_706f9cf7ec2919e5,
        mid_decode_c07672a5ccaa0565,
        mid_doubleValue_44067586fec56606,
        mid_equals_55f7ed877b4720ef,
        mid_floatValue_388e059cf45fb2f9,
        mid_hashCode_c6ef1683adc87377,
        mid_hashCode_86e66c1a2af7daf0,
        mid_intValue_c6ef1683adc87377,
        mid_longValue_25efeb8f9279460d,
        mid_parseByte_3bc95bf0a4ee20ac,
        mid_parseByte_cf633fbc1b53a457,
        mid_shortValue_6687947706ee7380,
        mid_toString_8cdd42a672015029,
        mid_toString_3ba69904174814ac,
        mid_toUnsignedInt_86e66c1a2af7daf0,
        mid_toUnsignedLong_5e7aae93561289b8,
        mid_valueOf_5e922b9039165ff8,
        mid_valueOf_c07672a5ccaa0565,
        mid_valueOf_1bf71f463225968f,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Byte(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Byte(const Byte& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jbyte MAX_VALUE;
      static jbyte MIN_VALUE;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Byte(jbyte);
      Byte(const ::java::lang::String &);

      jbyte byteValue() const;
      static jint compare(jbyte, jbyte);
      jint compareTo(const Byte &) const;
      static Byte decode(const ::java::lang::String &);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jbyte);
      jint intValue() const;
      jlong longValue() const;
      static jbyte parseByte(const ::java::lang::String &);
      static jbyte parseByte(const ::java::lang::String &, jint);
      jshort shortValue() const;
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jbyte);
      static jint toUnsignedInt(jbyte);
      static jlong toUnsignedLong(jbyte);
      static Byte valueOf(jbyte);
      static Byte valueOf(const ::java::lang::String &);
      static Byte valueOf(const ::java::lang::String &, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(Byte);

    class t_Byte {
    public:
      PyObject_HEAD
      Byte object;
      static PyObject *wrap_Object(const Byte&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
