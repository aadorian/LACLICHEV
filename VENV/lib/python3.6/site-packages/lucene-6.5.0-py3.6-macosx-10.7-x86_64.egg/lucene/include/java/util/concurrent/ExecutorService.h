#ifndef java_util_concurrent_ExecutorService_H
#define java_util_concurrent_ExecutorService_H

#include "java/util/concurrent/Executor.h"

namespace java {
  namespace util {
    namespace concurrent {
      class Callable;
      class TimeUnit;
      class ExecutionException;
      class TimeoutException;
      class Future;
    }
    class Collection;
    class List;
  }
  namespace lang {
    class Runnable;
    class Class;
    class InterruptedException;
    class Object;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {
    namespace concurrent {

      class ExecutorService : public ::java::util::concurrent::Executor {
      public:
        enum {
          mid_awaitTermination_0189065d6b3ea0fb,
          mid_invokeAll_57db43b94740731e,
          mid_invokeAll_ed2586d5ba976bbc,
          mid_invokeAny_63d2ea3f1d44c08c,
          mid_invokeAny_83f6f152c22214c2,
          mid_isShutdown_cc8de42f0a91785b,
          mid_isTerminated_cc8de42f0a91785b,
          mid_shutdown_baea6bf243e2d9b8,
          mid_shutdownNow_b85e661efb704f64,
          mid_submit_feb29650b1522403,
          mid_submit_b73ed3f83bb7ae15,
          mid_submit_37340f407830aa7c,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit ExecutorService(jobject obj) : ::java::util::concurrent::Executor(obj) {
          if (obj != NULL)
            env->getClass(initializeClass);
        }
        ExecutorService(const ExecutorService& obj) : ::java::util::concurrent::Executor(obj) {}

        jboolean awaitTermination(jlong, const ::java::util::concurrent::TimeUnit &) const;
        ::java::util::List invokeAll(const ::java::util::Collection &) const;
        ::java::util::List invokeAll(const ::java::util::Collection &, jlong, const ::java::util::concurrent::TimeUnit &) const;
        ::java::lang::Object invokeAny(const ::java::util::Collection &) const;
        ::java::lang::Object invokeAny(const ::java::util::Collection &, jlong, const ::java::util::concurrent::TimeUnit &) const;
        jboolean isShutdown() const;
        jboolean isTerminated() const;
        void shutdown() const;
        ::java::util::List shutdownNow() const;
        ::java::util::concurrent::Future submit(const ::java::util::concurrent::Callable &) const;
        ::java::util::concurrent::Future submit(const ::java::lang::Runnable &) const;
        ::java::util::concurrent::Future submit(const ::java::lang::Runnable &, const ::java::lang::Object &) const;
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace util {
    namespace concurrent {
      extern PyTypeObject PY_TYPE(ExecutorService);

      class t_ExecutorService {
      public:
        PyObject_HEAD
        ExecutorService object;
        static PyObject *wrap_Object(const ExecutorService&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
