#ifndef java_lang_Double_H
#define java_lang_Double_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class NumberFormatException;
    class Class;
    class Comparable;
    class Object;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Double : public ::java::lang::Number {
    public:
      enum {
        mid_init$_1b85c158638de45b,
        mid_init$_3e4369e088f8ac83,
        mid_byteValue_9714a86531c8152d,
        mid_compare_24db3f76021f3e96,
        mid_compareTo_2693c8ba6540f3b2,
        mid_doubleToLongBits_320ccd4d57637a9b,
        mid_doubleToRawLongBits_320ccd4d57637a9b,
        mid_doubleValue_44067586fec56606,
        mid_equals_55f7ed877b4720ef,
        mid_floatValue_388e059cf45fb2f9,
        mid_hashCode_c6ef1683adc87377,
        mid_hashCode_785fcf332b974747,
        mid_intValue_c6ef1683adc87377,
        mid_isFinite_55204652fa91a38f,
        mid_isInfinite_cc8de42f0a91785b,
        mid_isInfinite_55204652fa91a38f,
        mid_isNaN_cc8de42f0a91785b,
        mid_isNaN_55204652fa91a38f,
        mid_longBitsToDouble_60adc98e0ad1a843,
        mid_longValue_25efeb8f9279460d,
        mid_max_807487cfd67c96fb,
        mid_min_807487cfd67c96fb,
        mid_parseDouble_3dadc9516719242d,
        mid_shortValue_6687947706ee7380,
        mid_sum_807487cfd67c96fb,
        mid_toHexString_2d2f98e9862a8d2e,
        mid_toString_8cdd42a672015029,
        mid_toString_2d2f98e9862a8d2e,
        mid_valueOf_9251d410dbcd6f58,
        mid_valueOf_bc48c94637df5f33,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Double(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL)
          env->getClass(initializeClass);
      }
      Double(const Double& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jint MAX_EXPONENT;
      static jdouble MAX_VALUE;
      static jint MIN_EXPONENT;
      static jdouble MIN_NORMAL;
      static jdouble MIN_VALUE;
      static jdouble NEGATIVE_INFINITY;
      static jdouble NaN;
      static jdouble POSITIVE_INFINITY;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Double(jdouble);
      Double(const ::java::lang::String &);

      jbyte byteValue() const;
      static jint compare(jdouble, jdouble);
      jint compareTo(const Double &) const;
      static jlong doubleToLongBits(jdouble);
      static jlong doubleToRawLongBits(jdouble);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jdouble);
      jint intValue() const;
      static jboolean isFinite(jdouble);
      jboolean isInfinite() const;
      static jboolean isInfinite(jdouble);
      jboolean isNaN() const;
      static jboolean isNaN(jdouble);
      static jdouble longBitsToDouble(jlong);
      jlong longValue() const;
      static jdouble max$(jdouble, jdouble);
      static jdouble min$(jdouble, jdouble);
      static jdouble parseDouble(const ::java::lang::String &);
      jshort shortValue() const;
      static jdouble sum(jdouble, jdouble);
      static ::java::lang::String toHexString(jdouble);
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jdouble);
      static Double valueOf(const ::java::lang::String &);
      static Double valueOf(jdouble);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyTypeObject PY_TYPE(Double);

    class t_Double {
    public:
      PyObject_HEAD
      Double object;
      static PyObject *wrap_Object(const Double&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
