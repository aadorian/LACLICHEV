#ifndef org_apache_lucene_queryparser_classic_QueryParserBase_H
#define org_apache_lucene_queryparser_classic_QueryParserBase_H

#include "org/apache/lucene/util/QueryBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          class ParseException;
          class CharStream;
          class QueryParser$Operator;
        }
        namespace flexible {
          namespace standard {
            class CommonQueryParserConfiguration;
          }
        }
      }
      namespace search {
        class MultiTermQuery$RewriteMethod;
        class Query;
      }
      namespace analysis {
        class Analyzer;
      }
      namespace document {
        class DateTools$Resolution;
      }
    }
  }
}
namespace java {
  namespace util {
    class Locale;
    class TimeZone;
  }
  namespace lang {
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          class QueryParserBase : public ::org::apache::lucene::util::QueryBuilder {
          public:
            enum {
              mid_ReInit_7e33454def24a9be,
              mid_TopLevelQuery_104ce8fe998ef1d6,
              mid_escape_8f17802fec60c02b,
              mid_getAllowLeadingWildcard_cc8de42f0a91785b,
              mid_getAnalyzeRangeTerms_cc8de42f0a91785b,
              mid_getAutoGeneratePhraseQueries_cc8de42f0a91785b,
              mid_getDateResolution_dfe0e970c23cdb25,
              mid_getDefaultOperator_2bdb59b5771f8d66,
              mid_getField_8cdd42a672015029,
              mid_getFuzzyMinSim_388e059cf45fb2f9,
              mid_getFuzzyPrefixLength_c6ef1683adc87377,
              mid_getLocale_504cc041932546cf,
              mid_getLowercaseExpandedTerms_cc8de42f0a91785b,
              mid_getMaxDeterminizedStates_c6ef1683adc87377,
              mid_getMultiTermRewriteMethod_8b2fe66b964e4851,
              mid_getPhraseSlop_c6ef1683adc87377,
              mid_getTimeZone_34e5f89e5f1425d3,
              mid_init_80d09927ada99176,
              mid_parse_104ce8fe998ef1d6,
              mid_setAllowLeadingWildcard_787a33a11683567e,
              mid_setAnalyzeRangeTerms_787a33a11683567e,
              mid_setAutoGeneratePhraseQueries_787a33a11683567e,
              mid_setDateResolution_40bddeddcf104a54,
              mid_setDateResolution_806c1dab3c00e7f2,
              mid_setDefaultOperator_d25c263935d6eee5,
              mid_setFuzzyMinSim_3c7afe1a86cc960f,
              mid_setFuzzyPrefixLength_e3e5f5ff373509b3,
              mid_setLocale_365356ebcbbd4471,
              mid_setLowercaseExpandedTerms_787a33a11683567e,
              mid_setMaxDeterminizedStates_e3e5f5ff373509b3,
              mid_setMultiTermRewriteMethod_2dd02072c731f5c1,
              mid_setPhraseSlop_e3e5f5ff373509b3,
              mid_setTimeZone_c968cc6bd5280c40,
              mid_addClause_57ec25acc90e2ebb,
              mid_getFieldQuery_f6f3a8d35722f08a,
              mid_getFieldQuery_6c66722a5a406e46,
              mid_getWildcardQuery_a7d9ffed1df3698b,
              mid_getRangeQuery_31e575ab6289a026,
              mid_getFuzzyQuery_611e5e7454ca9888,
              mid_newFieldQuery_172250a29c2e476a,
              mid_newBooleanClause_32df63476818f0b5,
              mid_newRegexpQuery_a62c168fd7d3a321,
              mid_newMatchAllDocsQuery_afe29023a16c547c,
              mid_newWildcardQuery_a62c168fd7d3a321,
              mid_getRegexpQuery_a7d9ffed1df3698b,
              mid_getPrefixQuery_a7d9ffed1df3698b,
              mid_newRangeQuery_31e575ab6289a026,
              mid_newFuzzyQuery_133ae1b02d073c55,
              mid_newPrefixQuery_a62c168fd7d3a321,
              mid_getBooleanQuery_508b7d22e4e8e544,
              mid_addMultiTermClauses_98ae0264a3de92b5,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit QueryParserBase(jobject obj) : ::org::apache::lucene::util::QueryBuilder(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            QueryParserBase(const QueryParserBase& obj) : ::org::apache::lucene::util::QueryBuilder(obj) {}

            static ::org::apache::lucene::queryparser::classic::QueryParser$Operator *AND_OPERATOR;
            static ::org::apache::lucene::queryparser::classic::QueryParser$Operator *OR_OPERATOR;

            void ReInit(const ::org::apache::lucene::queryparser::classic::CharStream &) const;
            ::org::apache::lucene::search::Query TopLevelQuery(const ::java::lang::String &) const;
            static ::java::lang::String escape(const ::java::lang::String &);
            jboolean getAllowLeadingWildcard() const;
            jboolean getAnalyzeRangeTerms() const;
            jboolean getAutoGeneratePhraseQueries() const;
            ::org::apache::lucene::document::DateTools$Resolution getDateResolution(const ::java::lang::String &) const;
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator getDefaultOperator() const;
            ::java::lang::String getField() const;
            jfloat getFuzzyMinSim() const;
            jint getFuzzyPrefixLength() const;
            ::java::util::Locale getLocale() const;
            jboolean getLowercaseExpandedTerms() const;
            jint getMaxDeterminizedStates() const;
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod getMultiTermRewriteMethod() const;
            jint getPhraseSlop() const;
            ::java::util::TimeZone getTimeZone() const;
            void init(const ::java::lang::String &, const ::org::apache::lucene::analysis::Analyzer &) const;
            ::org::apache::lucene::search::Query parse(const ::java::lang::String &) const;
            void setAllowLeadingWildcard(jboolean) const;
            void setAnalyzeRangeTerms(jboolean) const;
            void setAutoGeneratePhraseQueries(jboolean) const;
            void setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution &) const;
            void setDateResolution(const ::java::lang::String &, const ::org::apache::lucene::document::DateTools$Resolution &) const;
            void setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator &) const;
            void setFuzzyMinSim(jfloat) const;
            void setFuzzyPrefixLength(jint) const;
            void setLocale(const ::java::util::Locale &) const;
            void setLowercaseExpandedTerms(jboolean) const;
            void setMaxDeterminizedStates(jint) const;
            void setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod &) const;
            void setPhraseSlop(jint) const;
            void setTimeZone(const ::java::util::TimeZone &) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          extern PyTypeObject PY_TYPE(QueryParserBase);

          class t_QueryParserBase {
          public:
            PyObject_HEAD
            QueryParserBase object;
            static PyObject *wrap_Object(const QueryParserBase&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
