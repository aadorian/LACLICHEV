#ifndef org_apache_lucene_util_fst_ListOfOutputs_H
#define org_apache_lucene_util_fst_ListOfOutputs_H

#include "org/apache/lucene/util/fst/Outputs.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Class;
    class Object;
    class String;
  }
  namespace util {
    class List;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        class DataInput;
        class DataOutput;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          class ListOfOutputs : public ::org::apache::lucene::util::fst::Outputs {
          public:
            enum {
              mid_init$_d7ba0d8d878f729f,
              mid_add_3809ff3ae843e39e,
              mid_asList_4976d423a3cd8a65,
              mid_common_3809ff3ae843e39e,
              mid_getNoOutput_fcd621d44e119d75,
              mid_merge_3809ff3ae843e39e,
              mid_outputToString_37f8497ff6be258c,
              mid_ramBytesUsed_5e82310cae827c32,
              mid_read_f6e3b41d3ec11c2a,
              mid_readFinalOutput_f6e3b41d3ec11c2a,
              mid_skipFinalOutput_285283c59b811804,
              mid_skipOutput_285283c59b811804,
              mid_subtract_3809ff3ae843e39e,
              mid_toString_8cdd42a672015029,
              mid_write_f0b412364cd03417,
              mid_writeFinalOutput_f0b412364cd03417,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit ListOfOutputs(jobject obj) : ::org::apache::lucene::util::fst::Outputs(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            ListOfOutputs(const ListOfOutputs& obj) : ::org::apache::lucene::util::fst::Outputs(obj) {}

            ListOfOutputs(const ::org::apache::lucene::util::fst::Outputs &);

            ::java::lang::Object add(const ::java::lang::Object &, const ::java::lang::Object &) const;
            ::java::util::List asList(const ::java::lang::Object &) const;
            ::java::lang::Object common(const ::java::lang::Object &, const ::java::lang::Object &) const;
            ::java::lang::Object getNoOutput() const;
            ::java::lang::Object merge(const ::java::lang::Object &, const ::java::lang::Object &) const;
            ::java::lang::String outputToString(const ::java::lang::Object &) const;
            jlong ramBytesUsed(const ::java::lang::Object &) const;
            ::java::lang::Object read(const ::org::apache::lucene::store::DataInput &) const;
            ::java::lang::Object readFinalOutput(const ::org::apache::lucene::store::DataInput &) const;
            void skipFinalOutput(const ::org::apache::lucene::store::DataInput &) const;
            void skipOutput(const ::org::apache::lucene::store::DataInput &) const;
            ::java::lang::Object subtract(const ::java::lang::Object &, const ::java::lang::Object &) const;
            ::java::lang::String toString() const;
            void write(const ::java::lang::Object &, const ::org::apache::lucene::store::DataOutput &) const;
            void writeFinalOutput(const ::java::lang::Object &, const ::org::apache::lucene::store::DataOutput &) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          extern PyTypeObject PY_TYPE(ListOfOutputs);

          class t_ListOfOutputs {
          public:
            PyObject_HEAD
            ListOfOutputs object;
            PyTypeObject *parameters[1];
            static PyTypeObject **parameters_(t_ListOfOutputs *self)
            {
              return (PyTypeObject **) &(self->parameters);
            }
            static PyObject *wrap_Object(const ListOfOutputs&);
            static PyObject *wrap_jobject(const jobject&);
            static PyObject *wrap_Object(const ListOfOutputs&, PyTypeObject *);
            static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
