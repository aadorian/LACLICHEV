#ifndef org_apache_lucene_analysis_CharacterUtils_H
#define org_apache_lucene_analysis_CharacterUtils_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class Reader;
    class IOException;
  }
  namespace lang {
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        class CharacterUtils$CharacterBuffer;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        class CharacterUtils : public ::java::lang::Object {
        public:
          enum {
            mid_fill_9655b31df5340e83,
            mid_fill_db7a5f1409819396,
            mid_newCharacterBuffer_16692d4193df49ac,
            mid_toChars_461a4458f910f5d8,
            mid_toCodePoints_01f626d40847045d,
            mid_toLowerCase_dc4e7afa5630877e,
            mid_toUpperCase_dc4e7afa5630877e,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit CharacterUtils(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          CharacterUtils(const CharacterUtils& obj) : ::java::lang::Object(obj) {}

          static jboolean fill(const ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer &, const ::java::io::Reader &);
          static jboolean fill(const ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer &, const ::java::io::Reader &, jint);
          static ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer newCharacterBuffer(jint);
          static jint toChars(const JArray< jint > &, jint, jint, const JArray< jchar > &, jint);
          static jint toCodePoints(const JArray< jchar > &, jint, jint, const JArray< jint > &, jint);
          static void toLowerCase(const JArray< jchar > &, jint, jint);
          static void toUpperCase(const JArray< jchar > &, jint, jint);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        extern PyTypeObject PY_TYPE(CharacterUtils);

        class t_CharacterUtils {
        public:
          PyObject_HEAD
          CharacterUtils object;
          static PyObject *wrap_Object(const CharacterUtils&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
