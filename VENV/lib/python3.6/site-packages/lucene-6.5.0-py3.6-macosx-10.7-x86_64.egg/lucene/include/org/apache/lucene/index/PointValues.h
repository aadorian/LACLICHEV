#ifndef org_apache_lucene_index_PointValues_H
#define org_apache_lucene_index_PointValues_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class IndexReader;
        class PointValues$IntersectVisitor;
      }
    }
  }
}
namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        class PointValues : public ::java::lang::Object {
        public:
          enum {
            mid_estimatePointCount_6e150cf65b5e0b49,
            mid_getBytesPerDimension_07a398a2298c97a7,
            mid_getDocCount_07a398a2298c97a7,
            mid_getDocCount_61a43c68d9814a92,
            mid_getMaxPackedValue_be7021e69479c2d6,
            mid_getMaxPackedValue_c5c9af55abc3b6f7,
            mid_getMinPackedValue_be7021e69479c2d6,
            mid_getMinPackedValue_c5c9af55abc3b6f7,
            mid_getNumDimensions_07a398a2298c97a7,
            mid_intersect_2133e9e3adf95ba0,
            mid_size_9d541dc47c492f6a,
            mid_size_99b80cda51c2d15b,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit PointValues(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          PointValues(const PointValues& obj) : ::java::lang::Object(obj) {}

          static jint MAX_DIMENSIONS;
          static jint MAX_NUM_BYTES;

          jlong estimatePointCount(const ::java::lang::String &, const ::org::apache::lucene::index::PointValues$IntersectVisitor &) const;
          jint getBytesPerDimension(const ::java::lang::String &) const;
          jint getDocCount(const ::java::lang::String &) const;
          static jint getDocCount(const ::org::apache::lucene::index::IndexReader &, const ::java::lang::String &);
          JArray< jbyte > getMaxPackedValue(const ::java::lang::String &) const;
          static JArray< jbyte > getMaxPackedValue(const ::org::apache::lucene::index::IndexReader &, const ::java::lang::String &);
          JArray< jbyte > getMinPackedValue(const ::java::lang::String &) const;
          static JArray< jbyte > getMinPackedValue(const ::org::apache::lucene::index::IndexReader &, const ::java::lang::String &);
          jint getNumDimensions(const ::java::lang::String &) const;
          void intersect(const ::java::lang::String &, const ::org::apache::lucene::index::PointValues$IntersectVisitor &) const;
          jlong size(const ::java::lang::String &) const;
          static jlong size(const ::org::apache::lucene::index::IndexReader &, const ::java::lang::String &);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        extern PyTypeObject PY_TYPE(PointValues);

        class t_PointValues {
        public:
          PyObject_HEAD
          PointValues object;
          static PyObject *wrap_Object(const PointValues&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
