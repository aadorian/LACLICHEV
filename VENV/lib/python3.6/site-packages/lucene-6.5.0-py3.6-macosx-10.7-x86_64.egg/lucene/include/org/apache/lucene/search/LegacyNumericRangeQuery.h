#ifndef org_apache_lucene_search_LegacyNumericRangeQuery_H
#define org_apache_lucene_search_LegacyNumericRangeQuery_H

#include "org/apache/lucene/search/MultiTermQuery.h"

namespace java {
  namespace lang {
    class Integer;
    class Double;
    class Long;
    class Class;
    class Float;
    class Object;
    class Number;
    class String;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        class LegacyNumericRangeQuery : public ::org::apache::lucene::search::MultiTermQuery {
        public:
          enum {
            mid_equals_55f7ed877b4720ef,
            mid_getMax_b3a937517d29a25b,
            mid_getMin_b3a937517d29a25b,
            mid_getPrecisionStep_c6ef1683adc87377,
            mid_hashCode_c6ef1683adc87377,
            mid_includesMax_cc8de42f0a91785b,
            mid_includesMin_cc8de42f0a91785b,
            mid_newDoubleRange_faa10f049ecfd120,
            mid_newDoubleRange_a171598a092f582c,
            mid_newFloatRange_5d2a8c842cb0d4c7,
            mid_newFloatRange_aa9c57edd3f67777,
            mid_newIntRange_a745cdde2c7607b0,
            mid_newIntRange_75940ef66cdef3d9,
            mid_newLongRange_ed59f770d89cb717,
            mid_newLongRange_c3187d6502a7ca7d,
            mid_toString_8f17802fec60c02b,
            mid_getTermsEnum_7d6243f86225cbcf,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit LegacyNumericRangeQuery(jobject obj) : ::org::apache::lucene::search::MultiTermQuery(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          LegacyNumericRangeQuery(const LegacyNumericRangeQuery& obj) : ::org::apache::lucene::search::MultiTermQuery(obj) {}

          jboolean equals(const ::java::lang::Object &) const;
          ::java::lang::Number getMax() const;
          ::java::lang::Number getMin() const;
          jint getPrecisionStep() const;
          jint hashCode() const;
          jboolean includesMax() const;
          jboolean includesMin() const;
          static LegacyNumericRangeQuery newDoubleRange(const ::java::lang::String &, const ::java::lang::Double &, const ::java::lang::Double &, jboolean, jboolean);
          static LegacyNumericRangeQuery newDoubleRange(const ::java::lang::String &, jint, const ::java::lang::Double &, const ::java::lang::Double &, jboolean, jboolean);
          static LegacyNumericRangeQuery newFloatRange(const ::java::lang::String &, const ::java::lang::Float &, const ::java::lang::Float &, jboolean, jboolean);
          static LegacyNumericRangeQuery newFloatRange(const ::java::lang::String &, jint, const ::java::lang::Float &, const ::java::lang::Float &, jboolean, jboolean);
          static LegacyNumericRangeQuery newIntRange(const ::java::lang::String &, const ::java::lang::Integer &, const ::java::lang::Integer &, jboolean, jboolean);
          static LegacyNumericRangeQuery newIntRange(const ::java::lang::String &, jint, const ::java::lang::Integer &, const ::java::lang::Integer &, jboolean, jboolean);
          static LegacyNumericRangeQuery newLongRange(const ::java::lang::String &, const ::java::lang::Long &, const ::java::lang::Long &, jboolean, jboolean);
          static LegacyNumericRangeQuery newLongRange(const ::java::lang::String &, jint, const ::java::lang::Long &, const ::java::lang::Long &, jboolean, jboolean);
          ::java::lang::String toString(const ::java::lang::String &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        extern PyTypeObject PY_TYPE(LegacyNumericRangeQuery);

        class t_LegacyNumericRangeQuery {
        public:
          PyObject_HEAD
          LegacyNumericRangeQuery object;
          PyTypeObject *parameters[1];
          static PyTypeObject **parameters_(t_LegacyNumericRangeQuery *self)
          {
            return (PyTypeObject **) &(self->parameters);
          }
          static PyObject *wrap_Object(const LegacyNumericRangeQuery&);
          static PyObject *wrap_jobject(const jobject&);
          static PyObject *wrap_Object(const LegacyNumericRangeQuery&, PyTypeObject *);
          static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
