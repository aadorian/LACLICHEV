#ifndef org_antlr_v4_runtime_atn_ATNSimulator_H
#define org_antlr_v4_runtime_atn_ATNSimulator_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class String;
  }
  namespace util {
    class UUID;
  }
}
template<class T> class JArray;

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        namespace atn {

          class ATNSimulator : public ::java::lang::Object {
          public:
            enum {
              mid_checkCondition_787a33a11683567e,
              mid_checkCondition_be499344313e4423,
              mid_clearDFA_baea6bf243e2d9b8,
              mid_reset_baea6bf243e2d9b8,
              mid_toInt_ff8e6f6b78b99534,
              mid_toInt32_cd1c620f14049081,
              mid_toLong_a5f84acbf1cc07d7,
              mid_toUUID_1b1bfe335bd077ac,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit ATNSimulator(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            ATNSimulator(const ATNSimulator& obj) : ::java::lang::Object(obj) {}

            static ::java::util::UUID *SERIALIZED_UUID;
            static jint SERIALIZED_VERSION;

            static void checkCondition(jboolean);
            static void checkCondition(jboolean, const ::java::lang::String &);
            void clearDFA() const;
            void reset() const;
            static jint toInt(jchar);
            static jint toInt32(const JArray< jchar > &, jint);
            static jlong toLong(const JArray< jchar > &, jint);
            static ::java::util::UUID toUUID(const JArray< jchar > &, jint);
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        namespace atn {
          extern PyTypeObject PY_TYPE(ATNSimulator);

          class t_ATNSimulator {
          public:
            PyObject_HEAD
            ATNSimulator object;
            static PyObject *wrap_Object(const ATNSimulator&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
