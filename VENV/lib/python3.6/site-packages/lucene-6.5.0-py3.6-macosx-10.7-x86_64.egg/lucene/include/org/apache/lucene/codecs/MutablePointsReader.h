#ifndef org_apache_lucene_codecs_MutablePointsReader_H
#define org_apache_lucene_codecs_MutablePointsReader_H

#include "org/apache/lucene/codecs/PointsReader.h"

namespace java {
  namespace lang {
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        class MutablePointsReader : public ::org::apache::lucene::codecs::PointsReader {
        public:
          enum {
            mid_getByteAt_b16b138f51c08497,
            mid_getDocID_eb4f2d82869c338b,
            mid_getValue_bdbfc5fa60fa9795,
            mid_swap_bc518be07064cfee,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit MutablePointsReader(jobject obj) : ::org::apache::lucene::codecs::PointsReader(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          MutablePointsReader(const MutablePointsReader& obj) : ::org::apache::lucene::codecs::PointsReader(obj) {}

          jbyte getByteAt(jint, jint) const;
          jint getDocID(jint) const;
          void getValue(jint, const ::org::apache::lucene::util::BytesRef &) const;
          void swap(jint, jint) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        extern PyTypeObject PY_TYPE(MutablePointsReader);

        class t_MutablePointsReader {
        public:
          PyObject_HEAD
          MutablePointsReader object;
          static PyObject *wrap_Object(const MutablePointsReader&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
