#ifndef org_apache_lucene_util_bkd_HeapPointWriter_H
#define org_apache_lucene_util_bkd_HeapPointWriter_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          class PointReader;
          class PointWriter;
        }
        class BytesRef;
      }
    }
  }
}
namespace java {
  namespace lang {
    class Class;
    class String;
  }
  namespace io {
    class Closeable;
  }
  namespace util {
    class List;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          class HeapPointWriter : public ::java::lang::Object {
          public:
            enum {
              mid_init$_6798dde03f41be3f,
              mid_append_b675a3d527c69838,
              mid_close_baea6bf243e2d9b8,
              mid_copyFrom_116bc8ba7d67d73c,
              mid_destroy_baea6bf243e2d9b8,
              mid_getPackedValueSlice_bdbfc5fa60fa9795,
              mid_getReader_3e62cf23efe91bd6,
              mid_getSharedReader_6f618be29be270b1,
              mid_readPackedValue_e01496c7177078a7,
              mid_toString_8cdd42a672015029,
              max_mid
            };

            enum {
              fid_blocks,
              fid_docIDs,
              fid_ords,
              fid_ordsLong,
              fid_valuesPerBlock,
              max_fid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static jfieldID *fids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit HeapPointWriter(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            HeapPointWriter(const HeapPointWriter& obj) : ::java::lang::Object(obj) {}

            ::java::util::List _get_blocks() const;
            JArray< jint > _get_docIDs() const;
            void _set_docIDs(const JArray< jint > &) const;
            JArray< jint > _get_ords() const;
            void _set_ords(const JArray< jint > &) const;
            JArray< jlong > _get_ordsLong() const;
            void _set_ordsLong(const JArray< jlong > &) const;
            jint _get_valuesPerBlock() const;

            HeapPointWriter(jint, jint, jint, jboolean, jboolean);

            void append(const JArray< jbyte > &, jlong, jint) const;
            void close() const;
            void copyFrom(const HeapPointWriter &) const;
            void destroy() const;
            void getPackedValueSlice(jint, const ::org::apache::lucene::util::BytesRef &) const;
            ::org::apache::lucene::util::bkd::PointReader getReader(jlong, jlong) const;
            ::org::apache::lucene::util::bkd::PointReader getSharedReader(jlong, jlong, const ::java::util::List &) const;
            void readPackedValue(jint, const JArray< jbyte > &) const;
            ::java::lang::String toString() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          extern PyTypeObject PY_TYPE(HeapPointWriter);

          class t_HeapPointWriter {
          public:
            PyObject_HEAD
            HeapPointWriter object;
            static PyObject *wrap_Object(const HeapPointWriter&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
