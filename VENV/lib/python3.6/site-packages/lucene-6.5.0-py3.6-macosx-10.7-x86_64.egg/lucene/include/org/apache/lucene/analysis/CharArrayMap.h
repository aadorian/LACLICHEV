#ifndef org_apache_lucene_analysis_CharArrayMap_H
#define org_apache_lucene_analysis_CharArrayMap_H

#include "java/util/AbstractMap.h"

namespace java {
  namespace lang {
    class Class;
    class CharSequence;
    class Object;
    class String;
  }
  namespace util {
    class Map;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        class CharArraySet;
        class CharArrayMap$EntrySet;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        class CharArrayMap : public ::java::util::AbstractMap {
        public:
          enum {
            mid_init$_68c75cfb1249be06,
            mid_init$_f01f0d453c0af710,
            mid_clear_baea6bf243e2d9b8,
            mid_containsKey_55f7ed877b4720ef,
            mid_containsKey_14cd4666586f434c,
            mid_containsKey_7525a59f9f2875be,
            mid_copy_63044da5f1040cb1,
            mid_emptyMap_6f491ccace62fce8,
            mid_entrySet_c223b47d7a1a5e9a,
            mid_get_66330907689924a4,
            mid_get_d4c6bd378797b5e0,
            mid_get_cff2f3221f4e285b,
            mid_keySet_8d8f63c37b4b0a75,
            mid_put_4e62fbaebf4cff6e,
            mid_put_360588ecf096f933,
            mid_put_3809ff3ae843e39e,
            mid_put_3d32e2f6ce09d298,
            mid_remove_d4c6bd378797b5e0,
            mid_size_c6ef1683adc87377,
            mid_toString_8cdd42a672015029,
            mid_unmodifiableMap_9aa6583d84fae288,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit CharArrayMap(jobject obj) : ::java::util::AbstractMap(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          CharArrayMap(const CharArrayMap& obj) : ::java::util::AbstractMap(obj) {}

          CharArrayMap(const ::java::util::Map &, jboolean);
          CharArrayMap(jint, jboolean);

          void clear() const;
          jboolean containsKey(const ::java::lang::Object &) const;
          jboolean containsKey(const ::java::lang::CharSequence &) const;
          jboolean containsKey(const JArray< jchar > &, jint, jint) const;
          static CharArrayMap copy(const ::java::util::Map &);
          static CharArrayMap emptyMap();
          ::org::apache::lucene::analysis::CharArrayMap$EntrySet entrySet() const;
          ::java::lang::Object get(const ::java::lang::CharSequence &) const;
          ::java::lang::Object get(const ::java::lang::Object &) const;
          ::java::lang::Object get(const JArray< jchar > &, jint, jint) const;
          ::org::apache::lucene::analysis::CharArraySet keySet() const;
          ::java::lang::Object put(const JArray< jchar > &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::CharSequence &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::Object &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::String &, const ::java::lang::Object &) const;
          ::java::lang::Object remove(const ::java::lang::Object &) const;
          jint size() const;
          ::java::lang::String toString() const;
          static CharArrayMap unmodifiableMap(const CharArrayMap &);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        extern PyTypeObject PY_TYPE(CharArrayMap);

        class t_CharArrayMap {
        public:
          PyObject_HEAD
          CharArrayMap object;
          PyTypeObject *parameters[1];
          static PyTypeObject **parameters_(t_CharArrayMap *self)
          {
            return (PyTypeObject **) &(self->parameters);
          }
          static PyObject *wrap_Object(const CharArrayMap&);
          static PyObject *wrap_jobject(const jobject&);
          static PyObject *wrap_Object(const CharArrayMap&, PyTypeObject *);
          static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
