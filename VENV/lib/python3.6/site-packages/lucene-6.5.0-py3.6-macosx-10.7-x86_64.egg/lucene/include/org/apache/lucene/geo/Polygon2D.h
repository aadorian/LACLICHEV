#ifndef org_apache_lucene_geo_Polygon2D_H
#define org_apache_lucene_geo_Polygon2D_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        class Polygon;
      }
      namespace index {
        class PointValues$Relation;
      }
    }
  }
}
namespace java {
  namespace lang {
    class Class;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        class Polygon2D : public ::java::lang::Object {
        public:
          enum {
            mid_contains_6e744a31f8460fdf,
            mid_create_5c6a0d66b44b2463,
            mid_relate_c6e58fec5b5dc69c,
            max_mid
          };

          enum {
            fid_maxLat,
            fid_maxLon,
            fid_minLat,
            fid_minLon,
            max_fid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static jfieldID *fids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit Polygon2D(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          Polygon2D(const Polygon2D& obj) : ::java::lang::Object(obj) {}

          jdouble _get_maxLat() const;
          jdouble _get_maxLon() const;
          jdouble _get_minLat() const;
          jdouble _get_minLon() const;

          jboolean contains(jdouble, jdouble) const;
          static Polygon2D create(const JArray< ::org::apache::lucene::geo::Polygon > &);
          ::org::apache::lucene::index::PointValues$Relation relate(jdouble, jdouble, jdouble, jdouble) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        extern PyTypeObject PY_TYPE(Polygon2D);

        class t_Polygon2D {
        public:
          PyObject_HEAD
          Polygon2D object;
          static PyObject *wrap_Object(const Polygon2D&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
