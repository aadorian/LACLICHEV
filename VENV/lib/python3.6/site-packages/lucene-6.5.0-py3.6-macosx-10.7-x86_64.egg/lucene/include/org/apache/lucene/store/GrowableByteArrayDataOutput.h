#ifndef org_apache_lucene_store_GrowableByteArrayDataOutput_H
#define org_apache_lucene_store_GrowableByteArrayDataOutput_H

#include "org/apache/lucene/store/DataOutput.h"

namespace java {
  namespace lang {
    class Class;
    class String;
  }
  namespace io {
    class IOException;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        class GrowableByteArrayDataOutput : public ::org::apache::lucene::store::DataOutput {
        public:
          enum {
            mid_init$_e3e5f5ff373509b3,
            mid_getBytes_9f2b5bf6861b55dd,
            mid_getPosition_c6ef1683adc87377,
            mid_reset_baea6bf243e2d9b8,
            mid_writeByte_65a74eed9ce5d965,
            mid_writeBytes_d55124a1b37f87c1,
            mid_writeString_3e4369e088f8ac83,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit GrowableByteArrayDataOutput(jobject obj) : ::org::apache::lucene::store::DataOutput(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          GrowableByteArrayDataOutput(const GrowableByteArrayDataOutput& obj) : ::org::apache::lucene::store::DataOutput(obj) {}

          GrowableByteArrayDataOutput(jint);

          JArray< jbyte > getBytes() const;
          jint getPosition() const;
          void reset() const;
          void writeByte(jbyte) const;
          void writeBytes(const JArray< jbyte > &, jint, jint) const;
          void writeString(const ::java::lang::String &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        extern PyTypeObject PY_TYPE(GrowableByteArrayDataOutput);

        class t_GrowableByteArrayDataOutput {
        public:
          PyObject_HEAD
          GrowableByteArrayDataOutput object;
          static PyObject *wrap_Object(const GrowableByteArrayDataOutput&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
