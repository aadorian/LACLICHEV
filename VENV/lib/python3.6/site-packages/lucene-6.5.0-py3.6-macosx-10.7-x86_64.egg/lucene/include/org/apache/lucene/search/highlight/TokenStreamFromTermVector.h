#ifndef org_apache_lucene_search_highlight_TokenStreamFromTermVector_H
#define org_apache_lucene_search_highlight_TokenStreamFromTermVector_H

#include "org/apache/lucene/analysis/TokenStream.h"

namespace java {
  namespace lang {
    class Class;
  }
  namespace io {
    class IOException;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class Terms;
      }
      namespace util {
        class AttributeFactory;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          class TokenStreamFromTermVector : public ::org::apache::lucene::analysis::TokenStream {
          public:
            enum {
              mid_init$_6acbedef8772c0db,
              mid_getTermVectorTerms_b65fd83f23d14c39,
              mid_incrementToken_cc8de42f0a91785b,
              mid_reset_baea6bf243e2d9b8,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit TokenStreamFromTermVector(jobject obj) : ::org::apache::lucene::analysis::TokenStream(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            TokenStreamFromTermVector(const TokenStreamFromTermVector& obj) : ::org::apache::lucene::analysis::TokenStream(obj) {}

            static ::org::apache::lucene::util::AttributeFactory *ATTRIBUTE_FACTORY;

            TokenStreamFromTermVector(const ::org::apache::lucene::index::Terms &, jint);

            ::org::apache::lucene::index::Terms getTermVectorTerms() const;
            jboolean incrementToken() const;
            void reset() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          extern PyTypeObject PY_TYPE(TokenStreamFromTermVector);

          class t_TokenStreamFromTermVector {
          public:
            PyObject_HEAD
            TokenStreamFromTermVector object;
            static PyObject *wrap_Object(const TokenStreamFromTermVector&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
