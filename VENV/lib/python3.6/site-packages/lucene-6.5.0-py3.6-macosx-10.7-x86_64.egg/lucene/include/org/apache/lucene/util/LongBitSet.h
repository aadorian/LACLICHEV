#ifndef org_apache_lucene_util_LongBitSet_H
#define org_apache_lucene_util_LongBitSet_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class LongBitSet : public ::java::lang::Object {
        public:
          enum {
            mid_init$_ea7e2607a44304f3,
            mid_init$_3a47854df5377cfd,
            mid_and_839f80c16edf57ae,
            mid_andNot_839f80c16edf57ae,
            mid_bits2words_c8dddfb021d16d75,
            mid_cardinality_25efeb8f9279460d,
            mid_clear_ea7e2607a44304f3,
            mid_clear_384dd12794dbfa68,
            mid_clone_5df3d4ad931da9f6,
            mid_ensureCapacity_dc5845fd15896a47,
            mid_equals_55f7ed877b4720ef,
            mid_flip_ea7e2607a44304f3,
            mid_flip_384dd12794dbfa68,
            mid_get_b4fd5d865937b320,
            mid_getAndClear_b4fd5d865937b320,
            mid_getAndSet_b4fd5d865937b320,
            mid_getBits_e1c56da1ec3bb32a,
            mid_hashCode_c6ef1683adc87377,
            mid_intersects_94d0183a334abcd0,
            mid_length_25efeb8f9279460d,
            mid_nextSetBit_7beee2f6754bb612,
            mid_or_839f80c16edf57ae,
            mid_prevSetBit_7beee2f6754bb612,
            mid_scanIsEmpty_cc8de42f0a91785b,
            mid_set_ea7e2607a44304f3,
            mid_set_384dd12794dbfa68,
            mid_xor_839f80c16edf57ae,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit LongBitSet(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          LongBitSet(const LongBitSet& obj) : ::java::lang::Object(obj) {}

          LongBitSet(jlong);
          LongBitSet(const JArray< jlong > &, jlong);

          void and$(const LongBitSet &) const;
          void andNot(const LongBitSet &) const;
          static jint bits2words(jlong);
          jlong cardinality() const;
          void clear(jlong) const;
          void clear(jlong, jlong) const;
          LongBitSet clone() const;
          static LongBitSet ensureCapacity(const LongBitSet &, jlong);
          jboolean equals(const ::java::lang::Object &) const;
          void flip(jlong) const;
          void flip(jlong, jlong) const;
          jboolean get(jlong) const;
          jboolean getAndClear(jlong) const;
          jboolean getAndSet(jlong) const;
          JArray< jlong > getBits() const;
          jint hashCode() const;
          jboolean intersects(const LongBitSet &) const;
          jlong length() const;
          jlong nextSetBit(jlong) const;
          void or$(const LongBitSet &) const;
          jlong prevSetBit(jlong) const;
          jboolean scanIsEmpty() const;
          void set(jlong) const;
          void set(jlong, jlong) const;
          void xor$(const LongBitSet &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(LongBitSet);

        class t_LongBitSet {
        public:
          PyObject_HEAD
          LongBitSet object;
          static PyObject *wrap_Object(const LongBitSet&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
