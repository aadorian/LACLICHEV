#ifndef org_apache_lucene_search_similarities_ClassicSimilarity_H
#define org_apache_lucene_search_similarities_ClassicSimilarity_H

#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class FieldInvertState;
      }
      namespace util {
        class BytesRef;
      }
      namespace search {
        class TermStatistics;
        class CollectionStatistics;
        class Explanation;
      }
    }
  }
}
namespace java {
  namespace lang {
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          class ClassicSimilarity : public ::org::apache::lucene::search::similarities::TFIDFSimilarity {
          public:
            enum {
              mid_init$_baea6bf243e2d9b8,
              mid_coord_c51aed0fbe1bd676,
              mid_decodeNormValue_f1c5e6c84931c3a7,
              mid_encodeNormValue_be3a30f812645b27,
              mid_getDiscountOverlaps_cc8de42f0a91785b,
              mid_idf_6433aa7673a75001,
              mid_idfExplain_0e6367d3f9d3b8e2,
              mid_lengthNorm_31870c0533a290e9,
              mid_queryNorm_964797309c64246e,
              mid_scorePayload_3e81d58ab20756bd,
              mid_setDiscountOverlaps_787a33a11683567e,
              mid_sloppyFreq_a03598f6d111e8a0,
              mid_tf_964797309c64246e,
              mid_toString_8cdd42a672015029,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit ClassicSimilarity(jobject obj) : ::org::apache::lucene::search::similarities::TFIDFSimilarity(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            ClassicSimilarity(const ClassicSimilarity& obj) : ::org::apache::lucene::search::similarities::TFIDFSimilarity(obj) {}

            ClassicSimilarity();

            jfloat coord(jint, jint) const;
            jfloat decodeNormValue(jlong) const;
            jlong encodeNormValue(jfloat) const;
            jboolean getDiscountOverlaps() const;
            jfloat idf(jlong, jlong) const;
            ::org::apache::lucene::search::Explanation idfExplain(const ::org::apache::lucene::search::CollectionStatistics &, const ::org::apache::lucene::search::TermStatistics &) const;
            jfloat lengthNorm(const ::org::apache::lucene::index::FieldInvertState &) const;
            jfloat queryNorm(jfloat) const;
            jfloat scorePayload(jint, jint, jint, const ::org::apache::lucene::util::BytesRef &) const;
            void setDiscountOverlaps(jboolean) const;
            jfloat sloppyFreq(jint) const;
            jfloat tf(jfloat) const;
            ::java::lang::String toString() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          extern PyTypeObject PY_TYPE(ClassicSimilarity);

          class t_ClassicSimilarity {
          public:
            PyObject_HEAD
            ClassicSimilarity object;
            static PyObject *wrap_Object(const ClassicSimilarity&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
