#ifndef org_apache_lucene_util_BytesRefBuilder_H
#define org_apache_lucene_util_BytesRefBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class CharSequence;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class BytesRefBuilder : public ::java::lang::Object {
        public:
          enum {
            mid_init$_baea6bf243e2d9b8,
            mid_append_65a74eed9ce5d965,
            mid_append_b520e38da2ff4ef3,
            mid_append_693a9346383d381f,
            mid_append_d55124a1b37f87c1,
            mid_byteAt_833fadb206e1ebde,
            mid_bytes_9f2b5bf6861b55dd,
            mid_clear_baea6bf243e2d9b8,
            mid_copyBytes_b520e38da2ff4ef3,
            mid_copyBytes_693a9346383d381f,
            mid_copyBytes_d55124a1b37f87c1,
            mid_copyChars_61978bd96b05672d,
            mid_copyChars_dc4e7afa5630877e,
            mid_copyChars_40a7c8345dc0e2ee,
            mid_equals_55f7ed877b4720ef,
            mid_get_84793a59f2a911aa,
            mid_grow_e3e5f5ff373509b3,
            mid_hashCode_c6ef1683adc87377,
            mid_length_c6ef1683adc87377,
            mid_setByteAt_b7ded73c04b26bc1,
            mid_setLength_e3e5f5ff373509b3,
            mid_toBytesRef_84793a59f2a911aa,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit BytesRefBuilder(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          BytesRefBuilder(const BytesRefBuilder& obj) : ::java::lang::Object(obj) {}

          BytesRefBuilder();

          void append(jbyte) const;
          void append(const ::org::apache::lucene::util::BytesRef &) const;
          void append(const BytesRefBuilder &) const;
          void append(const JArray< jbyte > &, jint, jint) const;
          jbyte byteAt(jint) const;
          JArray< jbyte > bytes() const;
          void clear() const;
          void copyBytes(const ::org::apache::lucene::util::BytesRef &) const;
          void copyBytes(const BytesRefBuilder &) const;
          void copyBytes(const JArray< jbyte > &, jint, jint) const;
          void copyChars(const ::java::lang::CharSequence &) const;
          void copyChars(const JArray< jchar > &, jint, jint) const;
          void copyChars(const ::java::lang::CharSequence &, jint, jint) const;
          jboolean equals(const ::java::lang::Object &) const;
          ::org::apache::lucene::util::BytesRef get() const;
          void grow(jint) const;
          jint hashCode() const;
          jint length() const;
          void setByteAt(jint, jbyte) const;
          void setLength(jint) const;
          ::org::apache::lucene::util::BytesRef toBytesRef() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(BytesRefBuilder);

        class t_BytesRefBuilder {
        public:
          PyObject_HEAD
          BytesRefBuilder object;
          static PyObject *wrap_Object(const BytesRefBuilder&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
