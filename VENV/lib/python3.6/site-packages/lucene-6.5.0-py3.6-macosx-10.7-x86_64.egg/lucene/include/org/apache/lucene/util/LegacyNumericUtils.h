#ifndef org_apache_lucene_util_LegacyNumericUtils_H
#define org_apache_lucene_util_LegacyNumericUtils_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Integer;
    class Long;
    class Class;
  }
  namespace io {
    class IOException;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class TermsEnum;
        class Terms;
      }
      namespace util {
        class BytesRef;
        class LegacyNumericUtils$IntRangeBuilder;
        class BytesRefBuilder;
        class LegacyNumericUtils$LongRangeBuilder;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class LegacyNumericUtils : public ::java::lang::Object {
        public:
          enum {
            mid_filterPrefixCodedInts_0fd6447136d39b48,
            mid_filterPrefixCodedLongs_0fd6447136d39b48,
            mid_getMaxInt_ad21dd7ae7818e0e,
            mid_getMaxLong_6bd98dbdcc2721ed,
            mid_getMinInt_ad21dd7ae7818e0e,
            mid_getMinLong_6bd98dbdcc2721ed,
            mid_getPrefixCodedIntShift_33f8b862327c8129,
            mid_getPrefixCodedLongShift_33f8b862327c8129,
            mid_intToPrefixCoded_c6713b3658b8fbf8,
            mid_longToPrefixCoded_67b99f8497bc2c74,
            mid_prefixCodedToInt_33f8b862327c8129,
            mid_prefixCodedToLong_4f3b288988f994c7,
            mid_splitIntRange_856421c496006889,
            mid_splitLongRange_e96218da9d44aac5,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit LegacyNumericUtils(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          LegacyNumericUtils(const LegacyNumericUtils& obj) : ::java::lang::Object(obj) {}

          static jint BUF_SIZE_INT;
          static jint BUF_SIZE_LONG;
          static jint PRECISION_STEP_DEFAULT;
          static jint PRECISION_STEP_DEFAULT_32;
          static jbyte SHIFT_START_INT;
          static jbyte SHIFT_START_LONG;

          static ::org::apache::lucene::index::TermsEnum filterPrefixCodedInts(const ::org::apache::lucene::index::TermsEnum &);
          static ::org::apache::lucene::index::TermsEnum filterPrefixCodedLongs(const ::org::apache::lucene::index::TermsEnum &);
          static ::java::lang::Integer getMaxInt(const ::org::apache::lucene::index::Terms &);
          static ::java::lang::Long getMaxLong(const ::org::apache::lucene::index::Terms &);
          static ::java::lang::Integer getMinInt(const ::org::apache::lucene::index::Terms &);
          static ::java::lang::Long getMinLong(const ::org::apache::lucene::index::Terms &);
          static jint getPrefixCodedIntShift(const ::org::apache::lucene::util::BytesRef &);
          static jint getPrefixCodedLongShift(const ::org::apache::lucene::util::BytesRef &);
          static void intToPrefixCoded(jint, jint, const ::org::apache::lucene::util::BytesRefBuilder &);
          static void longToPrefixCoded(jlong, jint, const ::org::apache::lucene::util::BytesRefBuilder &);
          static jint prefixCodedToInt(const ::org::apache::lucene::util::BytesRef &);
          static jlong prefixCodedToLong(const ::org::apache::lucene::util::BytesRef &);
          static void splitIntRange(const ::org::apache::lucene::util::LegacyNumericUtils$IntRangeBuilder &, jint, jint, jint);
          static void splitLongRange(const ::org::apache::lucene::util::LegacyNumericUtils$LongRangeBuilder &, jint, jlong, jlong);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(LegacyNumericUtils);

        class t_LegacyNumericUtils {
        public:
          PyObject_HEAD
          LegacyNumericUtils object;
          static PyObject *wrap_Object(const LegacyNumericUtils&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
