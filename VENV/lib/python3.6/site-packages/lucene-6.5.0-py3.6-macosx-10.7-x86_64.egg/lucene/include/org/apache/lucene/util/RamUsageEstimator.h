#ifndef org_apache_lucene_util_RamUsageEstimator_H
#define org_apache_lucene_util_RamUsageEstimator_H

#include "java/lang/Object.h"

namespace java {
  namespace text {
    class DecimalFormat;
  }
  namespace lang {
    class Long;
    class Class;
    class String;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class Accountable;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class RamUsageEstimator : public ::java::lang::Object {
        public:
          enum {
            mid_alignObjectSize_7beee2f6754bb612,
            mid_humanReadableUnits_00812b845ebcd112,
            mid_humanReadableUnits_6e3b5cddae7f3417,
            mid_shallowSizeOf_5e82310cae827c32,
            mid_shallowSizeOf_a1f5a5b5baf1ade3,
            mid_shallowSizeOfInstance_7d35e47a0afff796,
            mid_sizeOf_2ef700b56568c770,
            mid_sizeOf_ed7cbc82f7021b18,
            mid_sizeOf_734f976c36af27f6,
            mid_sizeOf_cde2eb47a3dd55c3,
            mid_sizeOf_3ca85fce65d6a900,
            mid_sizeOf_114f2634e551c765,
            mid_sizeOf_98641e43460753ea,
            mid_sizeOf_5cfe454af51cfc93,
            mid_sizeOf_30e10b263643d330,
            mid_sizeOf_646a57742d9669ea,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit RamUsageEstimator(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          RamUsageEstimator(const RamUsageEstimator& obj) : ::java::lang::Object(obj) {}

          static jboolean COMPRESSED_REFS_ENABLED;
          static jint NUM_BYTES_ARRAY_HEADER;
          static jint NUM_BYTES_BOOLEAN;
          static jint NUM_BYTES_BYTE;
          static jint NUM_BYTES_CHAR;
          static jint NUM_BYTES_DOUBLE;
          static jint NUM_BYTES_FLOAT;
          static jint NUM_BYTES_INT;
          static jint NUM_BYTES_LONG;
          static jint NUM_BYTES_OBJECT_ALIGNMENT;
          static jint NUM_BYTES_OBJECT_HEADER;
          static jint NUM_BYTES_OBJECT_REF;
          static jint NUM_BYTES_SHORT;
          static jlong ONE_GB;
          static jlong ONE_KB;
          static jlong ONE_MB;

          static jlong alignObjectSize(jlong);
          static ::java::lang::String humanReadableUnits(jlong);
          static ::java::lang::String humanReadableUnits(jlong, const ::java::text::DecimalFormat &);
          static jlong shallowSizeOf(const ::java::lang::Object &);
          static jlong shallowSizeOf(const JArray< ::java::lang::Object > &);
          static jlong shallowSizeOfInstance(const ::java::lang::Class &);
          static jlong sizeOf(const JArray< jlong > &);
          static jlong sizeOf(const JArray< jdouble > &);
          static jlong sizeOf(const JArray< ::org::apache::lucene::util::Accountable > &);
          static jlong sizeOf(const JArray< jshort > &);
          static jlong sizeOf(const JArray< jchar > &);
          static jlong sizeOf(const JArray< jboolean > &);
          static jlong sizeOf(const JArray< jbyte > &);
          static jlong sizeOf(const ::java::lang::Long &);
          static jlong sizeOf(const JArray< jint > &);
          static jlong sizeOf(const JArray< jfloat > &);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(RamUsageEstimator);

        class t_RamUsageEstimator {
        public:
          PyObject_HEAD
          RamUsageEstimator object;
          static PyObject *wrap_Object(const RamUsageEstimator&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
