#ifndef org_apache_lucene_util_FixedBitSet_H
#define org_apache_lucene_util_FixedBitSet_H

#include "org/apache/lucene/util/BitSet.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Class;
    class Object;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        class DocIdSetIterator;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class FixedBitSet : public ::org::apache::lucene::util::BitSet {
        public:
          enum {
            mid_init$_e3e5f5ff373509b3,
            mid_init$_66a34abbf5973a0a,
            mid_and_866ab1e5843c4d27,
            mid_andNot_866ab1e5843c4d27,
            mid_andNotCount_63758fdd56fead1f,
            mid_bits2words_eb4f2d82869c338b,
            mid_cardinality_c6ef1683adc87377,
            mid_clear_e3e5f5ff373509b3,
            mid_clear_bc518be07064cfee,
            mid_clone_812c40b2d98235e1,
            mid_ensureCapacity_34a0579baaf644f0,
            mid_equals_55f7ed877b4720ef,
            mid_flip_e3e5f5ff373509b3,
            mid_flip_bc518be07064cfee,
            mid_get_0c58b358fa08b0cc,
            mid_getAndClear_0c58b358fa08b0cc,
            mid_getAndSet_0c58b358fa08b0cc,
            mid_getBits_e1c56da1ec3bb32a,
            mid_hashCode_c6ef1683adc87377,
            mid_intersectionCount_63758fdd56fead1f,
            mid_intersects_11b8560cac7d37fd,
            mid_length_c6ef1683adc87377,
            mid_nextSetBit_eb4f2d82869c338b,
            mid_or_927a97acaee1b240,
            mid_or_866ab1e5843c4d27,
            mid_prevSetBit_eb4f2d82869c338b,
            mid_ramBytesUsed_25efeb8f9279460d,
            mid_scanIsEmpty_cc8de42f0a91785b,
            mid_set_e3e5f5ff373509b3,
            mid_set_bc518be07064cfee,
            mid_unionCount_63758fdd56fead1f,
            mid_xor_866ab1e5843c4d27,
            mid_xor_927a97acaee1b240,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FixedBitSet(jobject obj) : ::org::apache::lucene::util::BitSet(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          FixedBitSet(const FixedBitSet& obj) : ::org::apache::lucene::util::BitSet(obj) {}

          FixedBitSet(jint);
          FixedBitSet(const JArray< jlong > &, jint);

          void and$(const FixedBitSet &) const;
          void andNot(const FixedBitSet &) const;
          static jlong andNotCount(const FixedBitSet &, const FixedBitSet &);
          static jint bits2words(jint);
          jint cardinality() const;
          void clear(jint) const;
          void clear(jint, jint) const;
          FixedBitSet clone() const;
          static FixedBitSet ensureCapacity(const FixedBitSet &, jint);
          jboolean equals(const ::java::lang::Object &) const;
          void flip(jint) const;
          void flip(jint, jint) const;
          jboolean get(jint) const;
          jboolean getAndClear(jint) const;
          jboolean getAndSet(jint) const;
          JArray< jlong > getBits() const;
          jint hashCode() const;
          static jlong intersectionCount(const FixedBitSet &, const FixedBitSet &);
          jboolean intersects(const FixedBitSet &) const;
          jint length() const;
          jint nextSetBit(jint) const;
          void or$(const ::org::apache::lucene::search::DocIdSetIterator &) const;
          void or$(const FixedBitSet &) const;
          jint prevSetBit(jint) const;
          jlong ramBytesUsed() const;
          jboolean scanIsEmpty() const;
          void set(jint) const;
          void set(jint, jint) const;
          static jlong unionCount(const FixedBitSet &, const FixedBitSet &);
          void xor$(const FixedBitSet &) const;
          void xor$(const ::org::apache::lucene::search::DocIdSetIterator &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(FixedBitSet);

        class t_FixedBitSet {
        public:
          PyObject_HEAD
          FixedBitSet object;
          static PyObject *wrap_Object(const FixedBitSet&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
