#ifndef org_apache_lucene_uninverting_FieldCache$PointParser_H
#define org_apache_lucene_uninverting_FieldCache$PointParser_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class TermsEnum;
        class Terms;
      }
      namespace uninverting {
        class FieldCache$Parser;
      }
    }
  }
}
namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Class;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace uninverting {

        class FieldCache$PointParser : public ::java::lang::Object {
        public:
          enum {
            mid_init$_baea6bf243e2d9b8,
            mid_termsEnum_9d36d5fbd024f98f,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FieldCache$PointParser(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          FieldCache$PointParser(const FieldCache$PointParser& obj) : ::java::lang::Object(obj) {}

          FieldCache$PointParser();

          ::org::apache::lucene::index::TermsEnum termsEnum(const ::org::apache::lucene::index::Terms &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace uninverting {
        extern PyTypeObject PY_TYPE(FieldCache$PointParser);

        class t_FieldCache$PointParser {
        public:
          PyObject_HEAD
          FieldCache$PointParser object;
          static PyObject *wrap_Object(const FieldCache$PointParser&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
