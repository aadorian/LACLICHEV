#ifndef org_apache_lucene_codecs_Codec_H
#define org_apache_lucene_codecs_Codec_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        class NormsFormat;
        class PointsFormat;
        class FieldInfosFormat;
        class CompoundFormat;
        class PostingsFormat;
        class LiveDocsFormat;
        class SegmentInfoFormat;
        class DocValuesFormat;
        class TermVectorsFormat;
        class StoredFieldsFormat;
      }
      namespace util {
        class NamedSPILoader$NamedSPI;
      }
    }
  }
}
namespace java {
  namespace lang {
    class ClassLoader;
    class Class;
    class String;
  }
  namespace util {
    class Set;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        class Codec : public ::java::lang::Object {
        public:
          enum {
            mid_availableCodecs_c97555483a81e2c4,
            mid_compoundFormat_5542b0d8558b4fdc,
            mid_docValuesFormat_e3334e8c068c3753,
            mid_fieldInfosFormat_5e0959d67b250bc8,
            mid_forName_c3a50c1a56bfc364,
            mid_getDefault_20e918dab22021eb,
            mid_getName_8cdd42a672015029,
            mid_liveDocsFormat_414b89247b33558d,
            mid_normsFormat_7046c176d667d69e,
            mid_pointsFormat_df39629ba3b5f7eb,
            mid_postingsFormat_814376bb12ac29b3,
            mid_reloadCodecs_af8f127c5efa4df2,
            mid_segmentInfoFormat_bac52b06c791ca68,
            mid_setDefault_0a1b9b79164a4999,
            mid_storedFieldsFormat_6b113dd71c0655a8,
            mid_termVectorsFormat_d59aed36194b855a,
            mid_toString_8cdd42a672015029,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit Codec(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          Codec(const Codec& obj) : ::java::lang::Object(obj) {}

          static ::java::util::Set availableCodecs();
          ::org::apache::lucene::codecs::CompoundFormat compoundFormat() const;
          ::org::apache::lucene::codecs::DocValuesFormat docValuesFormat() const;
          ::org::apache::lucene::codecs::FieldInfosFormat fieldInfosFormat() const;
          static Codec forName(const ::java::lang::String &);
          static Codec getDefault();
          ::java::lang::String getName() const;
          ::org::apache::lucene::codecs::LiveDocsFormat liveDocsFormat() const;
          ::org::apache::lucene::codecs::NormsFormat normsFormat() const;
          ::org::apache::lucene::codecs::PointsFormat pointsFormat() const;
          ::org::apache::lucene::codecs::PostingsFormat postingsFormat() const;
          static void reloadCodecs(const ::java::lang::ClassLoader &);
          ::org::apache::lucene::codecs::SegmentInfoFormat segmentInfoFormat() const;
          static void setDefault(const Codec &);
          ::org::apache::lucene::codecs::StoredFieldsFormat storedFieldsFormat() const;
          ::org::apache::lucene::codecs::TermVectorsFormat termVectorsFormat() const;
          ::java::lang::String toString() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        extern PyTypeObject PY_TYPE(Codec);

        class t_Codec {
        public:
          PyObject_HEAD
          Codec object;
          static PyObject *wrap_Object(const Codec&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
