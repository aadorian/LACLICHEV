#ifndef org_apache_lucene_index_FieldInfo_H
#define org_apache_lucene_index_FieldInfo_H

#include "java/lang/Object.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class IndexOptions;
        class DocValuesType;
      }
    }
  }
}
namespace java {
  namespace lang {
    class Class;
    class String;
  }
  namespace util {
    class Map;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        class FieldInfo : public ::java::lang::Object {
        public:
          enum {
            mid_init$_52c04fdd0c149e80,
            mid_attributes_f44c49bd487dca3f,
            mid_checkConsistency_cc8de42f0a91785b,
            mid_getAttribute_8f17802fec60c02b,
            mid_getDocValuesGen_25efeb8f9279460d,
            mid_getDocValuesType_b8fe618cc019ed9b,
            mid_getIndexOptions_e9c3a5befa5763ef,
            mid_getPointDimensionCount_c6ef1683adc87377,
            mid_getPointNumBytes_c6ef1683adc87377,
            mid_hasNorms_cc8de42f0a91785b,
            mid_hasPayloads_cc8de42f0a91785b,
            mid_hasVectors_cc8de42f0a91785b,
            mid_omitsNorms_cc8de42f0a91785b,
            mid_putAttribute_734974d6876a6e71,
            mid_setDocValuesType_0850b5b2bd330bf4,
            mid_setIndexOptions_925a3b1c0534b063,
            mid_setOmitsNorms_baea6bf243e2d9b8,
            mid_setPointDimensions_bc518be07064cfee,
            max_mid
          };

          enum {
            fid_name,
            fid_number,
            max_fid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static jfieldID *fids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FieldInfo(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          FieldInfo(const FieldInfo& obj) : ::java::lang::Object(obj) {}

          ::java::lang::String _get_name() const;
          jint _get_number() const;

          FieldInfo(const ::java::lang::String &, jint, jboolean, jboolean, jboolean, const ::org::apache::lucene::index::IndexOptions &, const ::org::apache::lucene::index::DocValuesType &, jlong, const ::java::util::Map &, jint, jint);

          ::java::util::Map attributes() const;
          jboolean checkConsistency() const;
          ::java::lang::String getAttribute(const ::java::lang::String &) const;
          jlong getDocValuesGen() const;
          ::org::apache::lucene::index::DocValuesType getDocValuesType() const;
          ::org::apache::lucene::index::IndexOptions getIndexOptions() const;
          jint getPointDimensionCount() const;
          jint getPointNumBytes() const;
          jboolean hasNorms() const;
          jboolean hasPayloads() const;
          jboolean hasVectors() const;
          jboolean omitsNorms() const;
          ::java::lang::String putAttribute(const ::java::lang::String &, const ::java::lang::String &) const;
          void setDocValuesType(const ::org::apache::lucene::index::DocValuesType &) const;
          void setIndexOptions(const ::org::apache::lucene::index::IndexOptions &) const;
          void setOmitsNorms() const;
          void setPointDimensions(jint, jint) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        extern PyTypeObject PY_TYPE(FieldInfo);

        class t_FieldInfo {
        public:
          PyObject_HEAD
          FieldInfo object;
          static PyObject *wrap_Object(const FieldInfo&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
