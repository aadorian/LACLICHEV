#ifndef org_apache_lucene_util_bkd_HeapPointReader_H
#define org_apache_lucene_util_bkd_HeapPointReader_H

#include "org/apache/lucene/util/bkd/PointReader.h"

namespace java {
  namespace lang {
    class Class;
  }
  namespace util {
    class List;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          class HeapPointReader : public ::org::apache::lucene::util::bkd::PointReader {
          public:
            enum {
              mid_init$_c07baa0c501580cc,
              mid_close_baea6bf243e2d9b8,
              mid_docID_c6ef1683adc87377,
              mid_next_cc8de42f0a91785b,
              mid_ord_25efeb8f9279460d,
              mid_packedValue_9f2b5bf6861b55dd,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit HeapPointReader(jobject obj) : ::org::apache::lucene::util::bkd::PointReader(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            HeapPointReader(const HeapPointReader& obj) : ::org::apache::lucene::util::bkd::PointReader(obj) {}

            HeapPointReader(const ::java::util::List &, jint, jint, const JArray< jint > &, const JArray< jlong > &, const JArray< jint > &, jint, jint, jboolean);

            void close() const;
            jint docID() const;
            jboolean next() const;
            jlong ord() const;
            JArray< jbyte > packedValue() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          extern PyTypeObject PY_TYPE(HeapPointReader);

          class t_HeapPointReader {
          public:
            PyObject_HEAD
            HeapPointReader object;
            static PyObject *wrap_Object(const HeapPointReader&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
