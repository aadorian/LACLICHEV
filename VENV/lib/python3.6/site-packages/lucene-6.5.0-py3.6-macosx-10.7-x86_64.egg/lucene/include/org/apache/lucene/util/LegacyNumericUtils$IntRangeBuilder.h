#ifndef org_apache_lucene_util_LegacyNumericUtils$IntRangeBuilder_H
#define org_apache_lucene_util_LegacyNumericUtils$IntRangeBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class LegacyNumericUtils$IntRangeBuilder : public ::java::lang::Object {
        public:
          enum {
            mid_init$_baea6bf243e2d9b8,
            mid_addRange_46e6036e446b0f58,
            mid_addRange_275ffc0519c7ce01,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit LegacyNumericUtils$IntRangeBuilder(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          LegacyNumericUtils$IntRangeBuilder(const LegacyNumericUtils$IntRangeBuilder& obj) : ::java::lang::Object(obj) {}

          LegacyNumericUtils$IntRangeBuilder();

          void addRange(const ::org::apache::lucene::util::BytesRef &, const ::org::apache::lucene::util::BytesRef &) const;
          void addRange(jint, jint, jint) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyTypeObject PY_TYPE(LegacyNumericUtils$IntRangeBuilder);

        class t_LegacyNumericUtils$IntRangeBuilder {
        public:
          PyObject_HEAD
          LegacyNumericUtils$IntRangeBuilder object;
          static PyObject *wrap_Object(const LegacyNumericUtils$IntRangeBuilder&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
