#ifndef org_apache_lucene_util_fst_FST_H
#define org_apache_lucene_util_fst_FST_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Class;
    class String;
  }
  namespace util {
    class Collection;
  }
  namespace nio {
    namespace file {
      class Path;
    }
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          class FST$INPUT_TYPE;
          class Outputs;
          class FST$Arc;
          class FST$BytesReader;
        }
        class Accountable;
      }
      namespace store {
        class DataOutput;
        class DataInput;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          class FST : public ::java::lang::Object {
          public:
            enum {
              mid_init$_e103d8a3646d26db,
              mid_init$_b023ffce48f803e8,
              mid_findTargetArc_17f14ea9117e18c6,
              mid_getBytesReader_3871a7ffafe51dc4,
              mid_getChildResources_fd35991ad7af5f7b,
              mid_getEmptyOutput_fcd621d44e119d75,
              mid_getFirstArc_cd71908626ecb215,
              mid_getInputType_1c0d8c19357c5e1c,
              mid_ramBytesUsed_25efeb8f9279460d,
              mid_read_ed54b61401638196,
              mid_readFirstRealTargetArc_cb4fdcd88eebc49d,
              mid_readFirstTargetArc_cf8d54db077d71e8,
              mid_readLabel_87f0b1681894cc20,
              mid_readLastTargetArc_cf8d54db077d71e8,
              mid_readNextArc_5e46472bef0734b7,
              mid_readNextArcLabel_7cdb904575eabd4a,
              mid_readNextRealArc_5e46472bef0734b7,
              mid_save_6f934728a150246c,
              mid_save_cde5c34f3ed3eca5,
              mid_targetHasArcs_878f98aacb839c92,
              mid_toString_8cdd42a672015029,
              max_mid
            };

            enum {
              fid_inputType,
              fid_outputs,
              max_fid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static jfieldID *fids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit FST(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            FST(const FST& obj) : ::java::lang::Object(obj) {}

            static jint BIT_ARC_HAS_OUTPUT;
            static jint DEFAULT_MAX_BLOCK_BITS;
            static jint END_LABEL;

            ::org::apache::lucene::util::fst::FST$INPUT_TYPE _get_inputType() const;
            ::org::apache::lucene::util::fst::Outputs _get_outputs() const;

            FST(const ::org::apache::lucene::store::DataInput &, const ::org::apache::lucene::util::fst::Outputs &);
            FST(const ::org::apache::lucene::store::DataInput &, const ::org::apache::lucene::util::fst::Outputs &, jint);

            ::org::apache::lucene::util::fst::FST$Arc findTargetArc(jint, const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            ::org::apache::lucene::util::fst::FST$BytesReader getBytesReader() const;
            ::java::util::Collection getChildResources() const;
            ::java::lang::Object getEmptyOutput() const;
            ::org::apache::lucene::util::fst::FST$Arc getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc &) const;
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE getInputType() const;
            jlong ramBytesUsed() const;
            static FST read(const ::java::nio::file::Path &, const ::org::apache::lucene::util::fst::Outputs &);
            ::org::apache::lucene::util::fst::FST$Arc readFirstRealTargetArc(jlong, const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            ::org::apache::lucene::util::fst::FST$Arc readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            jint readLabel(const ::org::apache::lucene::store::DataInput &) const;
            ::org::apache::lucene::util::fst::FST$Arc readLastTargetArc(const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            ::org::apache::lucene::util::fst::FST$Arc readNextArc(const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            jint readNextArcLabel(const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            ::org::apache::lucene::util::fst::FST$Arc readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc &, const ::org::apache::lucene::util::fst::FST$BytesReader &) const;
            void save(const ::org::apache::lucene::store::DataOutput &) const;
            void save(const ::java::nio::file::Path &) const;
            static jboolean targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc &);
            ::java::lang::String toString() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          extern PyTypeObject PY_TYPE(FST);

          class t_FST {
          public:
            PyObject_HEAD
            FST object;
            PyTypeObject *parameters[1];
            static PyTypeObject **parameters_(t_FST *self)
            {
              return (PyTypeObject **) &(self->parameters);
            }
            static PyObject *wrap_Object(const FST&);
            static PyObject *wrap_jobject(const jobject&);
            static PyObject *wrap_Object(const FST&, PyTypeObject *);
            static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
