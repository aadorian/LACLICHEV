#ifndef org_apache_lucene_analysis_util_CharArrayMap_H
#define org_apache_lucene_analysis_util_CharArrayMap_H

#include "org/apache/lucene/analysis/CharArrayMap.h"

namespace java {
  namespace lang {
    class Class;
    class Object;
  }
  namespace util {
    class Map;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          class CharArrayMap : public ::org::apache::lucene::analysis::CharArrayMap {
          public:
            enum {
              mid_init$_f01f0d453c0af710,
              mid_init$_68c75cfb1249be06,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit CharArrayMap(jobject obj) : ::org::apache::lucene::analysis::CharArrayMap(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            CharArrayMap(const CharArrayMap& obj) : ::org::apache::lucene::analysis::CharArrayMap(obj) {}

            CharArrayMap(jint, jboolean);
            CharArrayMap(const ::java::util::Map &, jboolean);
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          extern PyTypeObject PY_TYPE(CharArrayMap);

          class t_CharArrayMap {
          public:
            PyObject_HEAD
            CharArrayMap object;
            PyTypeObject *parameters[1];
            static PyTypeObject **parameters_(t_CharArrayMap *self)
            {
              return (PyTypeObject **) &(self->parameters);
            }
            static PyObject *wrap_Object(const CharArrayMap&);
            static PyObject *wrap_jobject(const jobject&);
            static PyObject *wrap_Object(const CharArrayMap&, PyTypeObject *);
            static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
