#ifndef org_apache_lucene_analysis_util_AbstractAnalysisFactory_H
#define org_apache_lucene_analysis_util_AbstractAnalysisFactory_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class String;
  }
  namespace util {
    class Collection;
    class Set;
    class Map;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class Version;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          class AbstractAnalysisFactory : public ::java::lang::Object {
          public:
            enum {
              mid_get_18a6a125f1d85a55,
              mid_get_7794b479a291f68c,
              mid_get_b3257cf6db2a5c50,
              mid_get_bac2c8e6a043a112,
              mid_get_1cb8ccff1fabe710,
              mid_getChar_119bae1b8d2f38eb,
              mid_getClassArg_8cdd42a672015029,
              mid_getLuceneMatchVersion_e672a1655528a609,
              mid_getOriginalArgs_f44c49bd487dca3f,
              mid_getSet_19e6bc4681be0089,
              mid_isExplicitLuceneMatchVersion_cc8de42f0a91785b,
              mid_require_18a6a125f1d85a55,
              mid_require_b3257cf6db2a5c50,
              mid_require_d3128abf69c39cb1,
              mid_requireChar_99aaf6d903b4e366,
              mid_setExplicitLuceneMatchVersion_787a33a11683567e,
              mid_getBoolean_e3eb01c7e99e87c7,
              mid_getInt_044a64ea25977326,
              mid_getFloat_7bf74580861a6e86,
              mid_getLines_213e3b03d258f77a,
              mid_getWordSet_64109393d44001ae,
              mid_getSnowballWordSet_64109393d44001ae,
              mid_requireInt_5ce365c7f2c2c698,
              mid_requireBoolean_1d5a283ae8174abd,
              mid_requireFloat_cd7bf26c701bbf5c,
              mid_getPattern_213b46aa5d0528f3,
              mid_splitFileNames_76327e4aa6cc89ae,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit AbstractAnalysisFactory(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL)
                env->getClass(initializeClass);
            }
            AbstractAnalysisFactory(const AbstractAnalysisFactory& obj) : ::java::lang::Object(obj) {}

            static ::java::lang::String *LUCENE_MATCH_VERSION_PARAM;

            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, const ::java::lang::String &, jboolean) const;
            jchar getChar(const ::java::util::Map &, const ::java::lang::String &, jchar) const;
            ::java::lang::String getClassArg() const;
            ::org::apache::lucene::util::Version getLuceneMatchVersion() const;
            ::java::util::Map getOriginalArgs() const;
            ::java::util::Set getSet(const ::java::util::Map &, const ::java::lang::String &) const;
            jboolean isExplicitLuceneMatchVersion() const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &) const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &) const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, jboolean) const;
            jchar requireChar(const ::java::util::Map &, const ::java::lang::String &) const;
            void setExplicitLuceneMatchVersion(jboolean) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          extern PyTypeObject PY_TYPE(AbstractAnalysisFactory);

          class t_AbstractAnalysisFactory {
          public:
            PyObject_HEAD
            AbstractAnalysisFactory object;
            static PyObject *wrap_Object(const AbstractAnalysisFactory&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
