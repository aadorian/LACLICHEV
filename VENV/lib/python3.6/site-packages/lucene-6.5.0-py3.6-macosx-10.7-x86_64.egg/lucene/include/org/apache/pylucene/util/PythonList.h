#ifndef org_apache_pylucene_util_PythonList_H
#define org_apache_pylucene_util_PythonList_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class IndexOutOfBoundsException;
    class Class;
    class IllegalArgumentException;
    class Throwable;
  }
  namespace util {
    class Collection;
    class Iterator;
    class ListIterator;
    class List;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        class PythonList : public ::java::lang::Object {
        public:
          enum {
            mid_init$_baea6bf243e2d9b8,
            mid_add_55f7ed877b4720ef,
            mid_add_6a9ff5ee2dc8382f,
            mid_addAll_0dc28c9c4d739d9a,
            mid_addAll_b5be2d2925b96636,
            mid_clear_baea6bf243e2d9b8,
            mid_contains_55f7ed877b4720ef,
            mid_containsAll_0dc28c9c4d739d9a,
            mid_equals_55f7ed877b4720ef,
            mid_finalize_baea6bf243e2d9b8,
            mid_get_9e018d77818a6035,
            mid_indexOf_905ab65669c35710,
            mid_isEmpty_cc8de42f0a91785b,
            mid_iterator_5044241792d27377,
            mid_lastIndexOf_905ab65669c35710,
            mid_listIterator_36e123a87cb13941,
            mid_listIterator_18b3bc13e6223e0d,
            mid_pythonDecRef_baea6bf243e2d9b8,
            mid_pythonExtension_25efeb8f9279460d,
            mid_pythonExtension_ea7e2607a44304f3,
            mid_remove_9e018d77818a6035,
            mid_remove_55f7ed877b4720ef,
            mid_removeAll_0dc28c9c4d739d9a,
            mid_retainAll_0dc28c9c4d739d9a,
            mid_set_ca3ac3d2d2e10943,
            mid_size_c6ef1683adc87377,
            mid_subList_456e798ded61919a,
            mid_toArray_5516fb6815bf6d81,
            mid_toArray_15a178638428d3f7,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit PythonList(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          PythonList(const PythonList& obj) : ::java::lang::Object(obj) {}

          PythonList();

          jboolean add(const ::java::lang::Object &) const;
          void add(jint, const ::java::lang::Object &) const;
          jboolean addAll(const ::java::util::Collection &) const;
          jboolean addAll(jint, const ::java::util::Collection &) const;
          void clear() const;
          jboolean contains(const ::java::lang::Object &) const;
          jboolean containsAll(const ::java::util::Collection &) const;
          jboolean equals(const ::java::lang::Object &) const;
          void finalize() const;
          ::java::lang::Object get(jint) const;
          jint indexOf(const ::java::lang::Object &) const;
          jboolean isEmpty() const;
          ::java::util::Iterator iterator() const;
          jint lastIndexOf(const ::java::lang::Object &) const;
          ::java::util::ListIterator listIterator() const;
          ::java::util::ListIterator listIterator(jint) const;
          void pythonDecRef() const;
          jlong pythonExtension() const;
          void pythonExtension(jlong) const;
          ::java::lang::Object remove(jint) const;
          jboolean remove(const ::java::lang::Object &) const;
          jboolean removeAll(const ::java::util::Collection &) const;
          jboolean retainAll(const ::java::util::Collection &) const;
          ::java::lang::Object set(jint, const ::java::lang::Object &) const;
          jint size() const;
          ::java::util::List subList(jint, jint) const;
          JArray< ::java::lang::Object > toArray() const;
          JArray< ::java::lang::Object > toArray(const JArray< ::java::lang::Object > &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        extern PyTypeObject PY_TYPE(PythonList);

        class t_PythonList {
        public:
          PyObject_HEAD
          PythonList object;
          static PyObject *wrap_Object(const PythonList&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
