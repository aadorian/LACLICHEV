#ifndef org_apache_lucene_facet_FacetQuery_H
#define org_apache_lucene_facet_FacetQuery_H

#include "org/apache/lucene/search/TermQuery.h"

namespace java {
  namespace lang {
    class Class;
    class String;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        class FacetsConfig;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        class FacetQuery : public ::org::apache::lucene::search::TermQuery {
        public:
          enum {
            mid_init$_ed3b1e47b8c2ebb7,
            mid_init$_cba7a4253e3c8eb5,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FacetQuery(jobject obj) : ::org::apache::lucene::search::TermQuery(obj) {
            if (obj != NULL)
              env->getClass(initializeClass);
          }
          FacetQuery(const FacetQuery& obj) : ::org::apache::lucene::search::TermQuery(obj) {}

          FacetQuery(const ::java::lang::String &, const JArray< ::java::lang::String > &);
          FacetQuery(const ::org::apache::lucene::facet::FacetsConfig &, const ::java::lang::String &, const JArray< ::java::lang::String > &);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        extern PyTypeObject PY_TYPE(FacetQuery);

        class t_FacetQuery {
        public:
          PyObject_HEAD
          FacetQuery object;
          static PyObject *wrap_Object(const FacetQuery&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
